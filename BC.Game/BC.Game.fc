
//==================//
//script Written by: ••AviramDayan•• 30/04/2019 21:09PM - Version 1
//Last Update: 10/05/2020 21:15AM - Version 31
//==================//

using System;
using System.IO;
using FaucetCollector.Script;
using OpenQA.Selenium;
using OpenQA.Selenium.Interactions;
using System.Drawing;
using System.Threading.Tasks;
using System.Collections.Generic;

//css_inc ShortLinkUtilities
//css_inc RecaptchaUtilities
//css_inc AntiBotLinksUtility
//css_ref ImageProcessing
//css_ref ProcessingImagesUsingLockBits
//css_inc GetestCaptcha

public class bcgame : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {	
            return new FaucetSettings("https://bc.game/")
            {
                new FaucetSetting(){Name="UserName",Display="UserName",Type=EditorType.TextBox,Required=false},
                new FaucetSetting(){Name="Pass",Display="Password",Type=EditorType.Password,Required=false},
                //new FaucetSetting(){Name="DeleteCookies",Display="Delete Cookies - Sometimes solves problems (in login) if you have (Recommended)",Type=EditorType.CheckBox,Default=false},
                new FaucetSetting(){Name="FaucetClaim",Display="FaucetClaim - LuckySpin",Type=EditorType.CheckBox,Default=true},	
                new FaucetSetting(){Name="ToiletPaper",Display="ToiletPaper - Claim Token",Type=EditorType.CheckBox,Default=true},	

				 
				new FaucetSetting(){Name="MenuCoins",Display="MenuCoins - Select Favorite Coins",Type=EditorType.ComboBox,Default="JB",Items=new System.Collections.Generic.List<string>{"TRTL","EOS","TRX","VSYS","BCG","BKBT","DOGE","LTC","JB"}},
                
				new FaucetSetting() { Name = "3rd_DailyTasks_ClaimBonus", Display = "3rd_DailyTasks_ClaimBonus - ON/OFF", Type = EditorType.CheckBox, Default = true},		
                new FaucetSetting() { Name = "RollingTheLucky", Display = "RollingTheLucky - ON/OFF (note: for user with level 1)", Type = EditorType.CheckBox, Default = true},	
                new FaucetSetting() { Name = "RollDaily", Display = "RollDaily - ON/OFF", Type = EditorType.CheckBox, Default = true},	
                new FaucetSetting() { Name = "WhereIsCOCOBonus", Display = "WhereIsCOCOBonus - ON/OFF - Every 6 hours will Appears randomly in 3 different methods for 10 min (note: for user with level 1) ", Type = EditorType.CheckBox, Default = true},	
                new FaucetSetting() { Name = "Agent_Commissions_Reward", Display = "Agent_Commissions_Reward - ON/OFF ", Type = EditorType.CheckBox, Default = true},	

				new FaucetSetting() { Name = "Rain_AirDrop_Chat", Display = "Rain_AirDrop_Chat - ON/OFF (note: for user with level 1)", Type = EditorType.CheckBox, Default = false},		
                new FaucetSetting(){Name="MessageChat",Display="Your Message In Chat - only need to be active to get any rain",Default = ".",Type=EditorType.TextBox,Required=false},

 	            new FaucetSetting(){Name="AllGames_Menu",Display="AllGames_Menu - Select Favorite Game (Correctly available only 'ATM' Games)",Type=EditorType.ComboBox,Default="Slot",Items=new System.Collections.Generic.List<string>{"none","ATM","Slot"}},
                
				//ATM
 	            new FaucetSetting(){Name="ATM_Multiplication_Division_Menu",Display="ATM - Select if you want to Multiplication OR Division OR MAX OR MIN - Bet",Type=EditorType.ComboBox,Default="none",Items=new System.Collections.Generic.List<string>{"none","Max","Min","/2","x2"}},
				//new FaucetSetting() { Name = "BetAmount_ATM", Display = "ATM - Bet Amount", Type = EditorType.Numeric, Default = 1 },				
				new FaucetSetting() { Name = "ATM_NumbersOfClaim", Display = "ATM - Numbers Of Claim ", Type = EditorType.Numeric, Default = 3 },				
                new FaucetSetting() { Name = "ATM_SecondToWait", Display = "ATM - Second To Wait (before stop the bet) ", Type = EditorType.Numeric, Default = 2 },
				
				//SLOT
 	            new FaucetSetting(){Name="SLOT_Multiplication_Division_Menu",Display="SLOT - Select if you want to Multiplication OR Division OR MAX OR MIN - Bet",Type=EditorType.ComboBox,Default="none",Items=new System.Collections.Generic.List<string>{"none","Max","Min","/2","x2"}},
				//new FaucetSetting() { Name = "BetAmount_SLOT", Display = "SLOT - Bet Amount", Type = EditorType.Numeric, Default = 1 },				
				new FaucetSetting() { Name = "SLOT_NumbersOfClaim", Display = "SLOT - Numbers Of Claim ", Type = EditorType.Numeric, Default = 3 },				
                new FaucetSetting() { Name = "SLOT_SecondToWait", Display = "SLOT - Second To Wait (before stop the bet) ", Type = EditorType.Numeric, Default = 2 },

				
            };
        }
    }

	
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//
    public override void Start()
    {
        ad = false;
       
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "bc.game | BcGame";

		SuccessXPath = "//*";  //*[@id='']
        FailXPath = "//*"; //*[@id='']
	
        //TimerIsCountingUp = true;
		
        //Let Faucet Collector start up everything
        base.Start();
    }
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//

	
    bool ad; //custom bool


    public override int DoInit()
    {
			
		//if it's Checked
       if (GetBoolSetting("DeleteCookies"))
       {
		//Delete Cookies
		 Log("DeleteCookies - Checked");
         Driver.Manage().Cookies.DeleteAllCookies();
       } 
		
        //Let Faucet Collector continue.
        return base.DoInit();
    }


	
//==================//
//save Login Cookies 
//==================//
    public override bool IsLoggedIn()
    {
	    //save Login Cookies - Check if the "Logout" exist
        return ElementByXPath("//div[@class='user']") != null;
	 
        //return base.IsLoggedIn();
    }
//==================//
//save Login Cookies 
//==================//	




//=============//
//BeforeLogin
//=============//
    public override int BeforeLogin()
    {
		
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin();
    }
//=============//
//BeforeLogin
//=============//

	

	
//========//
//DoLogin
//========//
    public override int DoLogin()
    {
	
     var ExitButton = ElementByXPath("//div[@class='user']"); //user login panel - 1 Unique

	
	 //if i NOT Login - go to Login Page
	 if (!IsVisible(ExitButton))
	 {
	
		GoToUrl("https://bc.game/");
		Wait();		
		Wait(2);
		
        var LoginLightBox = ElementByXPath("//span[@class='login-label'] | //a[@class='nologin']");		 
        Click(LoginLightBox);
		
		Wait();		
		Wait(2);
		 
        var box_user = ElementByXPath("//input[@placeholder='Email']");
        SetText(box_user, GetSetting("UserName"));
		
		Wait(2);
		
        var box_pass = ElementByXPath("//input[@placeholder='Password']");
        SetText(box_pass, GetPassword("Pass"));
		
		Wait(2);
			
        var ButtonLog = ElementByXPath("//button[contains(@class,'xbutton') and contains(text(),'SIGN IN')]");
        Click(ButtonLog);
		
		Wait(1);
		
        CaptchaX2Function(); //call
		
		Wait();	

	 } // end ExitButton

        
       return base.DoLogin();
    }
//========//
//DoLogin
//========//
 

 


//========//
//AfterLogin
//========//
 public override int AfterLogin()
 {
 
  
    //we are good to continue
    return base.AfterLogin();

 }
//========//
//AfterLogin
//========//


	

//================//
//GetFaucetWaitTime
//================//
    public override int GetFaucetWaitTime()
    {

        if (ad)
        {
		    //Log("return ad");
			ad=false;
            return GetWaitSetting();
        }

		//let Faucet Collector continue.
        return base.GetFaucetWaitTime();
    }
//================//
//GetFaucetWaitTime
//================//



    public override int BeforeSolveCaptcha()
    {
 
        //Return we are ready to proceed
        return base.BeforeSolveFaucet();
    }

	
    public override int DoSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }

	
    public override int AfterSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }

	
    public override int BeforeSolveFaucet()
    {
        //Return we can continue
        return base.BeforeSolveFaucet();
    }
  
	
	
	
//==============//
//DoSolveFaucet
//==============//
 public override int DoSolveFaucet()
  {

	Coins_Function();  //first call to choose coin
	
    Wait();
    Wait(2);

    Driver.Navigate().Refresh(); //RefrashPage	

    Wait();
    Wait(2);


     //=============//
     //FaucetClaim
     //=============//
     if (GetBoolSetting("FaucetClaim"))
     {
	
		GoToUrl("https://bc.game/");
		Wait();		
		Wait(2);

		var Timer_Counter = ElementByXPath("//div[@class='count-down-wrap']");
		if (!IsVisible(Timer_Counter))
		{

		  Log("FaucetClaim - Timer not visible - go to LuckySpin");

		  var OpenLuckySpin_Button = ElementByXPath("//div[@id='spin-enter']");
		  if (IsVisible(OpenLuckySpin_Button))
		  {
		   Log("FaucetClaim - OpenLuckySpin_Button");
           Click(OpenLuckySpin_Button);
		   Wait(4);
          }
		  
          // mouse position click switch - good for "canvas" TagName flash/Games
          var canvas_VAR = Driver.FindElement(By.ClassName("spin-canvas")); //ctx - was             
          var size = canvas_VAR.Size;
          new Actions(Driver).MoveToElement(canvas_VAR, 800, 246).Click().MoveByOffset(size.Width / 800, size.Height / 246).Release().Perform(); //800 - was
          //=======//
		  
		  Wait(6);

		  Log("FaucetClaim - LuckySpin - Success");
          Notification("FaucetClaim - LuckySpin - Success");
          ClaimSuccess(); //Marks the claim as a success
		  
		}//end Timer_Counter
		
     } //end FaucetClaim
     //=============//
	 

          //=======================//
		  //Agent_Commissions_Reward
          //=======================//		  
          if (GetBoolSetting("Agent_Commissions_Reward"))
          { 
	  
           GoToUrl("https://bc.game/");
           Log("Agent_Commissions_Reward - go to");
		   
           Wait();
		   Wait(2); 
		   
		   var BoxTasksTop = ElementByXPath("//button[@class='magic-button active'] | //button[@class='magic-button'] ");
           if (IsVisible(BoxTasksTop)) 
           { 
             Log("Agent_Commissions_Reward - click - BoxTasksTop");
 
             Click(BoxTasksTop);
		     Wait(); 
 		     Wait(2);
			 
		     var Reward_1_Claim = ElementByXPath("//*[@id='user-bonus']/div/div[1]/button");
             if (IsVisible(Reward_1_Claim)) 
             { 
             Click(Reward_1_Claim);
             Log("Agent_Commissions_Reward - Reward_1_Claim");
		     Wait(2); 
			 }
			 
		     var Reward_2_Claim = ElementByXPath("//*[@id='user-bonus']/div/div[2]/button");
             if (IsVisible(Reward_2_Claim)) 
             { 
             Click(Reward_2_Claim);
             Log("Agent_Commissions_Reward - Reward_2_Claim");
		     Wait(2); 
			 }	
			 
		     var Reward_3_Claim = ElementByXPath("//*[@id='user-bonus']/div/div[3]/button");
             if (IsVisible(Reward_3_Claim)) // click to open & do stuff
             { 
             Click(Reward_3_Claim);
             Log("Agent_Commissions_Reward - Reward_3_Claim");
		     Wait(2); 	 
			 }	
			 
		     var Reward_4_Claim = ElementByXPath("//*[@id='user-bonus']/div/div[4]/button");
             if (IsVisible(Reward_4_Claim)) // click to open & do stuff
             { 
             Click(Reward_4_Claim);
             Log("Agent_Commissions_Reward - Reward_4_Claim");
		     Wait(2); 	 
			 }	
			 
		     var Reward_5_Claim = ElementByXPath("//*[@id='user-bonus']/div/div[5]/button");
             if (IsVisible(Reward_5_Claim)) // click to open & do stuff
             { 
             Click(Reward_5_Claim);
             Log("Agent_Commissions_Reward - Reward_5_Claim");
		     Wait(2); 	 
			 }	
			 
		     var Reward_6_Claim = ElementByXPath("//*[@id='user-bonus']/div/div[6]/button");
             if (IsVisible(Reward_6_Claim)) // click to open & do stuff
             { 
             Click(Reward_6_Claim);
             Log("Agent_Commissions_Reward - Reward_6_Claim");
		     Wait(2); 	 
			 }	
			 
		     var Reward_7_Claim = ElementByXPath("//*[@id='user-bonus']/div/div[7]/button");
             if (IsVisible(Reward_7_Claim)) // click to open & do stuff
             { 
             Click(Reward_7_Claim);
             Log("Agent_Commissions_Reward - Reward_7_Claim");
		     Wait(2); 	 
			 }	
			 
		     var Reward_8_Claim = ElementByXPath("//*[@id='user-bonus']/div/div[8]/button");
             if (IsVisible(Reward_8_Claim)) // click to open & do stuff
             { 
             Click(Reward_8_Claim);
             Log("Agent_Commissions_Reward - Reward_8_Claim");
		     Wait(2); 	 
			 }	
			 
		     var Reward_9_Claim = ElementByXPath("//*[@id='user-bonus']/div/div[9]/button");
             if (IsVisible(Reward_9_Claim)) // click to open & do stuff
             { 
             Click(Reward_9_Claim);
             Log("Agent_Commissions_Reward - Reward_9_Claim");
		     Wait(2); 	 
			 }	
			 
		     var Reward_10_Claim = ElementByXPath("//*[@id='user-bonus']/div/div[10]/button");
             if (IsVisible(Reward_10_Claim)) // click to open & do stuff
             { 
             Click(Reward_10_Claim);
             Log("Agent_Commissions_Reward - Reward_10_Claim");
		     Wait(2); 	 
			 }	
			 
           } //END BoxTasksTop
		   
	       WhereIsCOCOBonus_Function(); //call
		   Log("Rain_AirDrop_Chat: General Check");	
		   
          }// END Agent_Commissions_Reward
          //=======================//


          //=======================//
		  //3rd_DailyTasks_ClaimBonus
          //=======================//	
        if (GetBoolSetting("3rd_DailyTasks_ClaimBonus"))
        {  
	
           GoToUrl("https://bc.game/bonus");
           Log("3rd_DailyTasks_ClaimBonus - go to");
		   
           Wait();
		   Wait(2); 

		   var Open_3rd_DailyTasks_VAR = ElementByXPath("//div[@class='bonus-item']/div[@class='am-jbtask-wrap img-con']");
           if (IsVisible(Open_3rd_DailyTasks_VAR)) // click to open & do stuff
           { 
           Click(Open_3rd_DailyTasks_VAR);
           Log("Open_3rd_DailyTasks_VAR");
           }
		   
           Wait();
		   Wait(2); 
	   
		   var DailySignIN_VAR = ElementByXPath("//div[1]/button[contains(@class,'xbutton action') and contains(text(),'Claim') ]");
		   var BetOnce_VAR = ElementByXPath("//div[2]/button[contains(@class,'xbutton action'  ) and contains(text(),'Claim') ]");
		   var Bet_2_Once_GoBet_VAR = ElementByXPath("//div[2]/button[contains(@class,'xbutton action') and contains(text(),'Go') or contains(text(),'Bet') ]");
		   var Relief_VAR = ElementByXPath("//div[3]/button[contains(@class,'xbutton action') and contains(text(),'Claim') ] | //div[4]/button[contains(@class,'xbutton action') and contains(text(),'Claim') ] "); // if JB balance is less than 50

		   var DailySignIN_NOT_VAR = ElementByXPath("//div[1]/button[contains(@class,'xbutton-disabled') ]");		   
		   var BetOnce_NOT_VAR = ElementByXPath("//div[2]/button[contains(@class,'xbutton-disabled') ]");
		   var Relief_NOT_VAR = ElementByXPath("//div[3]/button[contains(@class,'xbutton-disabled') ]");
	   
		   
		   //===========//		   
		   //Visible//
		   //===========//
           if (IsVisible(DailySignIN_VAR))
           {
           Click(DailySignIN_VAR);
		   Log("3rd_DailyTasks_ClaimBonus: click on DailySignIN_VAR - Success");			 		   
           Wait();
		   Wait(2);  
		   }
			 
           if (IsVisible(BetOnce_VAR))
           {
           Click(BetOnce_VAR);
		   Log("3rd_DailyTasks_ClaimBonus: click on BetOnce_VAR - Success");			   
           Wait();
		   Wait(2);   
		   }
		
		 
           if (IsVisible(Relief_VAR))
           {
           Click(Relief_VAR);
		   Log("3rd_DailyTasks_ClaimBonus: click on Relief_VAR - Success");			 		   
           Wait();
		   Wait(2);   
		   }	

              //DONT ADD IT GIVE A LOT OF PROBLEMS//
		     /*
		     if (IsVisible(Bet_2_Once_GoBet_VAR)) //if text "Bet" apper need to click on "Bet" once,and after go to https://nanogames.io/crash to click again on "Bet" | only then the "Claim" will appear always for free
             {
			 
               Click(Bet_2_Once_GoBet_VAR);
		       Log("3rd_DailyTasks_ClaimBonus: click on - Bet_2_Once_GoBet_VAR - 'Bet' once");	
               Wait();
		       Wait(2);   

               ATM_Shorter_Function(); //CALL

             }//end Bet_2_Once_VAR
		     */

		   
		   //===========//		   
		   //NOT Visible//
		   //===========//
           if (IsVisible(DailySignIN_NOT_VAR))
           {
           Wait();
		   Wait(2);
		   Log("3rd_DailyTasks_ClaimBonus: DailySignIN_VAR - Not available");			 		      
		   }
			 
           if (IsVisible(BetOnce_NOT_VAR))
           {
           Wait();
		   Wait(2);
		   Log("3rd_DailyTasks_ClaimBonus: BetOnce_VAR - Not available");			 		    
		   }
			 
           if (IsVisible(Relief_NOT_VAR))
           {
           Wait();
		   Wait(2); 
		   Log("3rd_DailyTasks_ClaimBonus: Relief_VAR - Not available");			 		      
		   }

           Driver.Navigate().Refresh(); //RefrashPage	

           Wait();
           Wait(2);	
	   
	       //WhereIsCOCOBonus_Function(); //call
		   Log("Rain_AirDrop_Chat: General Check");	
		   
        }// end 3rd_DailyTasks_ClaimBonus
        //=======================//	
		  
		
        //================//
		//RollingTheLucky
        //================//		
        if (GetBoolSetting("RollingTheLucky"))
        {  
		
           GoToUrl("https://bc.game/bonus");
		   Log("RollingTheLucky: Go to bonus page");		
		
           Wait();
		   Wait(2);
		
		   var OneWindowsVAR = ElementByXPath("//div[@class='bonus-item']/div[@class='am-exchange-wrap img-con']");	
           Click(OneWindowsVAR);
		   Log("RollingTheLucky: click on OneWindows");	
		
		   Wait(2);
		
		   var RollingTheLuckyVAR = ElementByXPath("//div[@class='spin']");	
           Click(RollingTheLuckyVAR);
		   Log("RollingTheLucky: click on RollingTheLuckyVAR spin");	
		
		   Wait(2);

           Driver.Navigate().Refresh(); //RefrashPage	

           Wait();
           Wait(2);	
	   
	       WhereIsCOCOBonus_Function(); //call
		   Log("Rain_AirDrop_Chat: General Check");	
		   
        }// end RollingTheLucky
        //================//	
		
		
        //=============//
		//RollDaily
        //=============//		   
        if (GetBoolSetting("RollDaily"))
        {  
		
           GoToUrl("https://bc.game/bonus");
		   Log("RollDaily: Go to bonus page");		
		
           Wait();
		   Wait(2);
		
		   var OneWindowsVAR = ElementByXPath("//div[@class='bonus-item']/div[@class='am-rollpoint-wrap img-con']");	
           Click(OneWindowsVAR);
		   Log("RollDaily: click on OneWindows");	
		
		   Wait(2);
		   
           var Time_RollDaily = ElementByXPath("//div[@class='roll-time']");
           if (!IsVisible(Time_RollDaily))
           {
			   
		   var RollDailyVAR = ElementByXPath("//div[@class='roll-butwrap']/button"); //button[contains(text(),'ROLL')]
           Click(RollDailyVAR);
		   Log("RollDaily: click on RollDaily Success");	
		
		   Wait(2);			   

           Driver.Navigate().Refresh(); //RefrashPage	

           Wait();
           Wait(2);	  
           } 			   
 		   
        }// end RollDaily
        //================//	
 
 
        //================//
		//WhereIsCOCOBonus
        //================//	 
        if (GetBoolSetting("WhereIsCOCOBonus"))
        {  
	
	       WhereIsCOCOBonus_Function(); //call
   
        }// end WhereIsCOCOBonus
        //================//
 
 
        //================//
		//Rain_AirDrop_Chat
        //================//	
        if (GetBoolSetting("Rain_AirDrop_Chat"))
        {  

           GoToUrl("https://bc.game/");
		   Log("Rain_AirDrop_Chat: Go to bonus Chat");	
		   
           var ChatAlready_Open = ElementByXPath("//div[@class='xapp has-chat']"); //ChatAlready_Open
           var ChatAlready_Close = ElementByXPath("//div[@class='xapp']"); //ChatAlready_Close
		   
           var ChatButton = ElementByXPath("//button[@class='xbutton head-button has-border chat-button xbutton-gray xbadge-wrap']"); //ChatAlready_Close

           if (IsVisible(ChatAlready_Close))
           {
           Click(ChatButton);
		   Log("Rain_AirDrop_Chat: click on ChatAlready_Close - to open the chat");
		   } 	
		   
           if (IsVisible(ChatAlready_Open))
           {
			Log("Rain_AirDrop_Chat: ChatAlready_Open");
		   }    
   
	       Wait();
		   Wait(2);		

           var ChatInput_VAR = ElementByXPath("//input[@placeholder='Your Message']"); //ChatInput_VAR
           SetText(ChatInput_VAR, GetSetting("MessageChat"));
		   
	       Wait();
		   Wait(2);			   

           Driver.Navigate().Refresh(); //RefrashPage	

           Wait();
           Wait(2);				   
	   
	       WhereIsCOCOBonus_Function(); //call
		   Log("Rain_AirDrop_Chat: General Check");	
		   
        }// end Rain_AirDrop_Chat
         //================//
 
 
 
 		//================//
        //Menus Vars AllGames
		//================//
        //AllGames_Menu
        var AllGames_Menu_Var = GetSetting("AllGames_Menu");  	
		
		//===========================//
		//AllGames - none
		//===========================//
		
		 if(AllGames_Menu_Var=="none")
         {
			Log("none - no game here ");
		 }	
		
		 if(AllGames_Menu_Var=="ATM")
         {
			 ATM_GAME_Function(); //CALL TO ATM_GAME_Function
	     }
		 
		 if(AllGames_Menu_Var=="Slot")
         {
			 SLOT_GAME_Function(); //CALL TO ATM_GAME_Function
	     }		
		//===========================//
 
 

     //=============//
     //ToiletPaper
     //=============//
     if (GetBoolSetting("ToiletPaper"))
     {

		GoToUrl("https://campaign.bc.game/");
		Wait();		
		Wait(2);

        var GrabStart = ElementByXPath("//div[@class='xbutton grab ripple']"); //big start button "Grab"
		
        if (!IsVisible(GrabStart))
        {
          Log("GrabStart - not here - call to try to Check");
          CheckToday_Function(); //if the big button "Grab" not visible - call to try to Check  
		}
	
        if (IsVisible(GrabStart))
        {
          Log("click on GrabStart");
	      Click(GrabStart);

          Wait(3);

          var LoginIfram = ElementByXPath("//section[contains(@class,'login-dialog')]//div[contains(@style,'z-index') and contains(@style,'0000') ]");
          
          if (!IsVisible(LoginIfram))
          {			  
            CheckToday_Function(); //call    
			
		  } //end LoginIfram NOT Visible
		  
		  
		  if (IsVisible(LoginIfram))
          {
            Log("LoginIfram visible");
		  
            var iframeMainTag = ElementByXPath("//iframe[@id='iframe']");
            Driver.SwitchTo().Frame(iframeMainTag); //after active & switch to "iframe"

            var LoginTab = ElementByXPath("//div[contains(text(),'SIGNIN')]");
            if (IsVisible(LoginTab))
            {
              Log("click LoginTab");
	          Click(LoginTab);
		    }

		    Wait(2);

            var box_user = ElementByXPath("//input[@placeholder='Email']");
            SetText(box_user, GetSetting("UserName"));
		
		    Wait(2);
		
            var box_pass = ElementByXPath("//input[@placeholder='Password']");
            SetText(box_pass, GetPassword("Pass"));
		
		    Wait(2);

            var ButtonLog = ElementByXPath("//button[contains(@class,'xbutton') and contains(text(),'SIGN IN')]");
            if (IsVisible(ButtonLog))
            {
              Log("click ButtonLog");
	          Click(ButtonLog);
		    }
			
			Wait();	
			
            CaptchaX2Function();
		  
		    Wait();
		
            Driver.SwitchTo().DefaultContent(); //go back to default content in <html>
		  
		    Wait();
				
          } //end LoginIfram Visible

          CheckToday_Function(); //call    

          Wait(2);
		  		  		
        } //end GrabStart
		
     } //end ToiletPaper
		//===========================//

     ClaimSuccess(); //Marks the claim as a success
     return GetWaitSetting();  
	
        //We are good to continue
        return base.DoSolveFaucet();
 }
//==============//
//DoSolveFaucet
//==============///
	
	
	
	
	
//==============//
//AfterSolveFaucet
//==============//
  public override int AfterSolveFaucet()
  {

   //This faucet has nothing to do here. We will let Faucet Collector handle it.
   return base.AfterSolveFaucet();
   
  }
	
//==============//
//AfterSolveFaucet
//==============//



    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult();
    }
	
 
 
   //====================//	
   //CaptchaX2Function
   //====================//	
   public int CaptchaX2Function()
   {

        var Error_1_Message = ElementByXPath("//div[contains(@class,'xinput captcha')]//img | //div[contains(@class,'xform-item')]//img | //div[@class='xmessage-content' and contains(text(),'verify' )] | //div[@class='xnotify-content' and contains(text(),'error')] ");
        if (IsVisible(Error_1_Message))
        {
			
		  var TimeToWaitForBreak = DateTime.Now.AddSeconds(120);
		  while(true)
		  {
            //solve Captcha X2 XPath (1 = captcha image | 2 = input text )
            var result = DoSolveImageCaptcha(ElementByXPath ("//div[contains(@class,'xinput captcha')]//img | //div[contains(@class,'xform-item')]//img"),ElementByXPath("//input[@placeholder='Verification Code']") ); 
            if (result > 0)
            {
            return Fail("Error_1_Message - Fail login --- captcha failed");
            }
		    
		    Wait(5);
		    
            var Button_2_Log = ElementByXPath("//button[contains(@class,'xbutton') and contains(text(),'SIGN IN')]");
            Click(Button_2_Log);
		    
		    Wait(10);
		
            var Captcha_image_Check = ElementByXPath("//div[contains(@class,'xinput captcha')]//img | //div[contains(@class,'xform-item')]//img");
            if (!IsVisible(Captcha_image_Check))
            {
            Log("break - Captcha_image_Check - not visible");
            break; //break the wait loop
			}
			
            if (DateTime.Now > TimeToWaitForBreak) //if the time above 65 sec 
            {
            Log("break - TimeToWaitForBreak");
            break; //break the wait loop
            }
			
          }	//end while true
        }
		
        var Error_2_Message = ElementByXPath("//div[@class='xmessage-content' and contains(text(),'verify' )] | //div[@class='xnotify-content' and contains(text(),'error')] ");
        if (IsVisible(Error_2_Message))
        {
          Log("Error_2_Message - Appear - we return after 1 min ");
          //return 2*60; //we return after 1 min	
        }	
		
   return 0;				 
   }//end CaptchaX2Function
   //====================//	
		


   //====================//	
   //CheckToday_Function
   //====================//	
   public int CheckToday_Function()
   {

            var CheckToday = ElementByXPath("//div[contains(@class,'xbutton border')]//span[contains(text(),'today')]");
		    
		    if (IsVisible(CheckToday))
            {
              Log("already grabbed Token - try next time");
            }	
			
			if (!IsVisible(CheckToday))
            {
				
              var Grab_1_Start = ElementByXPath("//div[@class='xbutton grab ripple']");
	          Click(Grab_1_Start);
			  
			  Wait(3);
			  
              var YouGrab_1_Today = ElementByXPath("//div[contains(@class,'xbutton grab ripple') and contains(text(),'Grab my') ]");
	          Click(YouGrab_1_Today);
			  
              Log("Success - Grab Token");
              Notification("Success - Grab Token");
              ClaimSuccess(); //Marks the claim as a success
            }

   return 0;				 
   }//end CheckToday_Function
   //====================//	




//====================//	
//Coins_Function
//====================//	
 private bool Coins_Function()
 {
      Wait();
      Wait(2);
	  
      var OpenTabCoins = ElementByXPath("//div[@class='xselect currency-select']"); 
      Log("click - OpenTabCoins");
      Click(OpenTabCoins);
		
      Wait();
      Wait(2);
		 
      var MenuCoinsVAR = GetSetting("MenuCoins"); 
	  
      if(MenuCoinsVAR=="TRTL")
      {
      var TRTL_coin_VAR = ElementByXPath("//span[@class='coin-name' and contains(text(),'TRTL')]"); 
      Log("click - TRTL_coin_VAR");
      Click(TRTL_coin_VAR);
	  }// end TRTL
	  
      if(MenuCoinsVAR=="EOS")
      {
      var EOS_coin_VAR = ElementByXPath("//span[@class='coin-name' and contains(text(),'EOS')]"); 
      Log("click - EOS_coin_VAR");
      Click(EOS_coin_VAR);
	  }// end EOS
	  
      if(MenuCoinsVAR=="TRX")
      {
      var TRX_coin_VAR = ElementByXPath("//span[@class='coin-name' and contains(text(),'TRX')]"); 
      Log("click - TRX_coin_VAR");
      Click(TRX_coin_VAR);
	  }// end TRX	
	  
      if(MenuCoinsVAR=="VSYS")
      {
      var VSYS_coin_VAR = ElementByXPath("//span[@class='coin-name' and contains(text(),'VSYS')]"); 
      Log("click - VSYS_coin_VAR");
      Click(VSYS_coin_VAR);
	  }// end VSYS  
	  
	  if(MenuCoinsVAR=="BCG")
      {
      var BCG_coin_VAR = ElementByXPath("//span[@class='coin-name' and contains(text(),'BCG')]"); 
      Log("click - BCG_coin_VAR");
      Click(BCG_coin_VAR);
	  }// end BCG  
	  
	  if(MenuCoinsVAR=="BKBT")
      {
      var BKBT_coin_VAR = ElementByXPath("//span[@class='coin-name' and contains(text(),'BKBT')]"); 
      Log("click - BKBT_coin_VAR");
      Click(BKBT_coin_VAR);
	  }// end BKBT 

	  if(MenuCoinsVAR=="DOGE")
      {
      var DOGE_coin_VAR = ElementByXPath("//span[@class='coin-name' and contains(text(),'DOGE')]"); 
      Log("click - DOGE_coin_VAR");
      Click(DOGE_coin_VAR);
	  }// end DOGE  

	  if(MenuCoinsVAR=="LTC")
      {
      var LTC_coin_VAR = ElementByXPath("//span[@class='coin-name' and contains(text(),'LTC')]"); 
      Log("click - LTC_coin_VAR");
      Click(LTC_coin_VAR);
	  }// end LTC   
	  
	  if(MenuCoinsVAR=="JB")
      {
      var JB_coin_VAR = ElementByXPath("//span[@class='coin-name' and contains(text(),'JB')]"); 
      Log("click - JB_coin_VAR");
      Click(JB_coin_VAR);
	  }// end JB  
	   
	
 return true;
 }//end Coins_Function
//====================//
	
	
	
//====================//	
//Multiplication_ATM_Function
//====================//	
 private int Multiplication_ATM_Function()
 {
	
     var ATM_Multiplication_Division_Var = GetSetting("ATM_Multiplication_Division_Menu");  	

     if(ATM_Multiplication_Division_Var=="none")
     {
      Log("ATM_Multiplication_Division_Var - none");
     }					
     if(ATM_Multiplication_Division_Var=="Max")
     {
      var Max_VAR = ElementByXPath("//button[@class='xbutton amount-scale' and contains(text(),'MAX')]");
      Log("ATM_Multiplication_Division_Var - Click on - Max_VAR");
      Click(Max_VAR);					   
     }						
     if(ATM_Multiplication_Division_Var=="Min")
     {
      var Min_VAR = ElementByXPath("//button[@class='xbutton amount-scale' and contains(text(),'MIN')]");
      Log("ATM_Multiplication_Division_Var - Click on - Min_VAR");
      Click(Min_VAR);	  
     }	
     if(ATM_Multiplication_Division_Var=="/2")
     {
      var Division_2_VAR = ElementByXPath("//button[@class='xbutton amount-scale' and contains(text(),'/2')]");
      Log("ATM_Multiplication_Division_Var - Click on - Division_2_VAR");
      Click(Division_2_VAR);	      
     }	
     if(ATM_Multiplication_Division_Var=="x2")
     {
      var Multiplication_2_VAR = ElementByXPath("//button[@class='xbutton amount-scale' and contains(text(),'x2')]");
      Log("ATM_Multiplication_Division_Var - Click on - Multiplication_2_VAR");
      Click(Multiplication_2_VAR);	   
     }
	 
 return 0;
 }//end Multiplication_ATM_Function
//====================//	
	

//====================//	
//Multiplication_SLOT_Function
//====================//	
 private int Multiplication_SLOT_Function()
 {
	
     var SLOT_Multiplication_Division_Var = GetSetting("SLOT_Multiplication_Division_Menu");  	

     if(SLOT_Multiplication_Division_Var=="none")
     {
      Log("SLOT_Multiplication_Division_Var - none");
     }					
     if(SLOT_Multiplication_Division_Var=="Max")
     {
      var Max_VAR = ElementByXPath("//button[@class='xbutton amount-scale' and contains(text(),'MAX')]");
      Log("SLOT_Multiplication_Division_Var - Click on - Max_VAR");
      Click(Max_VAR);					   
     }						
     if(SLOT_Multiplication_Division_Var=="Min")
     {
      var Min_VAR = ElementByXPath("//button[@class='xbutton amount-scale' and contains(text(),'MIN')]");
      Log("SLOT_Multiplication_Division_Var - Click on - Min_VAR");
      Click(Min_VAR);	  
     }	
     if(SLOT_Multiplication_Division_Var=="/2")
     {
      var Division_2_VAR = ElementByXPath("//button[@class='xbutton amount-scale' and contains(text(),'/2')]");
      Log("SLOT_Multiplication_Division_Var - Click on - Division_2_VAR");
      Click(Division_2_VAR);	      
     }	
     if(SLOT_Multiplication_Division_Var=="x2")
     {
      var Multiplication_2_VAR = ElementByXPath("//button[@class='xbutton amount-scale' and contains(text(),'x2')]");
      Log("SLOT_Multiplication_Division_Var - Click on - Multiplication_2_VAR");
      Click(Multiplication_2_VAR);	   
     }
	 
 return 0;
 }//end Multiplication_SLOT_Function
//====================//	
		
	

	
   //====================//	
   //ATM_GAME_Function
   //====================//	
   public int ATM_GAME_Function()
   {
	
        GoToUrl("https://bc.game/crash");
        Log("ATM_GAME_Function - go to ATM - Game"); 
        Wait();
	    Wait(2);   			 
        Coins_Function(); //call to open coin			 

        Wait();
	    Wait(2); 

        var balance = ElementByXPath("//div[@class='xselect-trigger']//span[@class='coin-amount']");
        string BalanceSTRING = balance.Text.Trim().Split('.')[1];
        int BalanceINT = Convert.ToInt32(BalanceSTRING);
		
        if (BalanceINT < 1) 
        {
          //do not do nothing
           Log("ATM_GAME_Function - < 1"); 
        }  
		
        if (BalanceINT  > 1)
        {
           Log("ATM_GAME_Function - balance > 1 - Great"); 
           Wait(2);
           Multiplication_ATM_Function(); //call				   
           Wait();
		   
		   //=============//
		   //ATM Function Loop
		   //=============//
           int Claims;      
           Claims = Convert.ToInt32(GetSetting("ATM_NumbersOfClaim"));
           int Count = 0;

		   while (true) 
		   //if (!IsVisible(Bet_Game_Once_VAR))                     
		   {
		      Count++; //	important to put Count++ in start - Count OR store - Similar to the clock begins to count	
		      Log("ATM_GAME_Function Click - Count start - Claim - " + Count);	
			  
              var GetReadyToNextBet = ElementByXPath("//button[@id='crash-next']");		             		 						
		      if (IsVisible(GetReadyToNextBet))
              {
              Click(GetReadyToNextBet);		
		      } //end GetReadyToNextBet

		      Wait();
		      Log("ATM_GAME_Function Click - wait");	

              var Available_Bet = ElementByXPath("//button[@id='crash-bet']");		             		 						
		      if (IsVisible(Available_Bet))
              {
              Click(Available_Bet);	 
		      Log("ATM_GAME_Function Click - Available_Bet");	
              Wait(5); //so Wait until the button visible	
		      } //end Available_Bet

		      Wait();
		      Log("ATM_GAME_Function - wait for stop");	  
  
              var Stop_Bet = ElementByXPath("//button[@id='crash-escape']");
		      if (IsVisible(Stop_Bet))
              {
		      // user wait
		      int SecondToWaitVAR;
		      int.TryParse(GetSetting("ATM_SecondToWait"), out SecondToWaitVAR);   
		      Wait(SecondToWaitVAR);
				  
              Click(Stop_Bet);
		      Log("ATM_GAME_Function - stop - success");	    
              } //end Stop_Bet
			  

              if (Count >= Claims)  //IsVisible(YourTextVAR) && 
	          {	
	          Log("ATM break NumbersOfClaim");
		      break; //after break the while
	          }	

		   } //end  while (true)		 

        }//end balance > 1

   return 0;				 
   }//end ATM_GAME_Function
    //====================//	
    //====================//	
	


   //====================//	
   //SLOT_GAME_Function
   //====================//	
   public int SLOT_GAME_Function()
   {
	
        GoToUrl("https://bc.game/slots");
        Log("SLOT_GAME_Function - go to SLOT - Game"); 
        Wait();
	    Wait(2);   			 
        Coins_Function(); //call to open coin			 

        Wait();
	    Wait(2); 

        var balance = ElementByXPath("//div[@class='xselect-trigger']//span[@class='coin-amount']");
        string BalanceSTRING = balance.Text.Trim().Split('.')[1];
        int BalanceINT = Convert.ToInt32(BalanceSTRING);
		
        if (BalanceINT < 1) 
        {
          //do not do nothing
           Log("SLOT_GAME_Function - < 1"); 
        }  
		
        if (BalanceINT  > 1)
        {
           Log("SLOT_GAME_Function - balance > 1 - Great"); 
           Wait(2);
           Multiplication_SLOT_Function(); //call				   
           Wait();
		   
		   //=============//
		   //SLOT Function Loop
		   //=============//
           int Claims;      
           Claims = Convert.ToInt32(GetSetting("SLOT_NumbersOfClaim"));
           int Count = 0;

		   while (true) 
		   //if (!IsVisible(Bet_Game_Once_VAR))                     
		   {
		      Count++; //	important to put Count++ in start - Count OR store - Similar to the clock begins to count	
              Log("SLOT - Count start");				

              var Bet_Game_Once_VAR = ElementByXPath("//button[@class='xbutton xbutton-big xbutton-full']");		             		 						
              if (IsVisible(Bet_Game_Once_VAR)) 
              {	
		      Log("SLOT_GAME_Function Click on Bet - " + Count);	 
              Click(Bet_Game_Once_VAR);	   
              } 
	
              var Active_Bet = ElementByXPath("//button[@class='xbutton xbutton-big xbutton-disabled xbutton-full']");
		      if (IsVisible(Active_Bet))
              {
		      Wait(); //so Wait until the button visible						  
		      Log("SLOT_GAME_Function - wait for");	  
              } //end Active_Bet
			  
		      Log("SLOT_GAME_Function - success");	    

		      int SecondToWaitVAR;
		      int.TryParse(GetSetting("SLOT_SecondToWait"), out SecondToWaitVAR);   
		      Wait(SecondToWaitVAR);	

              if (Count >= Claims)  //IsVisible(YourTextVAR) && 
	          {	
	          Log("SLOT break NumbersOfClaim");
		      break; //after break the while
	          }	

		   } //end  while (true)		 

        }//end balance > 1
		
   return 0;				 
   }//end SLOT_GAME_Function
    //====================//	
    //====================//	
	
	
	
            //====================//	
            //ATM_Shorter_Function
            //====================//	
            public void ATM_Shorter_Function()
            {
                   GoToUrl("https://bc.game/crash"); 
                   Log("ATM_Shorter_Function - go to ATM - Game - to click once on 'Bet' button "); 
                   Wait();
		           Wait(2);   			 
			       Coins_Function(); //call to open coin			 

				   Wait();
		           Wait(2); 
				   
				   var Min_VAR = ElementByXPath("//button[@class='xbutton xbutton-hole' and contains(text(),'Min' | 'MIN')]");
                   Log("ATM_Multiplication_Division_Var - Click on - Min_VAR");
                   Click(Min_VAR);	  

                      var Bet_Game_Once_VAR = ElementByXPath("//button[@id='crash-bet']");
		              //while (!IsVisible(Bet_Game_Once_VAR)) //if text "Bet" apper need to click on "Bet" once,and after go to https://bc.game/atm to click again on "Bet" | only then the "Claim" will appear always for free
					  if (!IsVisible(Bet_Game_Once_VAR))                     
					  {
				
					     Wait(); //so Wait until the button visible						  
						 Log("ATM_Shorter_Function: click on - Bet_Game_Once_VAR - wait for");	
						 
                         var Bet_Game_Once_2_VAR = ElementByXPath("//button[@id='crash-bet']");		             		 						
		                 if (IsVisible(Bet_Game_Once_2_VAR)) //if text "Bet" apper need to click on "Bet" once,and after go to https://bc.game/atm to click again on "Bet" | only then the "Claim" will appear always for free
                         {
		                 Log("ATM_Shorter_Function: click on - Bet_Game_Once_2_VAR - now we click on Game 'Bet' - Success");	 
                         Click(Bet_Game_Once_2_VAR);	   					     
                         Wait(4); //so Wait until the button visible	
			             } //end Bet_Game_Once_2_VAR
						 
						 
                         var Stop_Bet = ElementByXPath("//button[@id='crash-escape']");
			             if (IsVisible(Stop_Bet)) //if text "Bet" apper need to click on "Bet" once,and after go to https://bc.game/atm to click again on "Bet" | only then the "Claim" will appear always for free
                         {
		                 Log("ATM_Shorter_Function: click on - wait for - Bet_Game_Stop_While - 'Stop' ");	        
					     // user wait
					     int SecondToWaitVAR;
					     int.TryParse(GetSetting("ATM_SecondToWait"), out SecondToWaitVAR);   
					     Wait(SecondToWaitVAR);						   
   
                         Click(Stop_Bet);
		                 Log("ATM_Shorter_Function: click on - Bet_Game_Stop_2_While - now we click on 'Stop' bet quickly to succeed");	    

                         } //end Stop_Bet
 
						 
			          } //end while Visible
            }//end ATM_Shorter_Function
           //====================//	
           //====================//						  
					  

         //====================//	
         //WhereIsCOCOBonus_Function
         //====================//	
         public void WhereIsCOCOBonus_Function()
         {		
           //GoToUrl("https://bc.game/");
		   Log("WhereIsCOCOBonus: Go to home page");		
           Wait();		
		   Wait(2);	 	
		   
           var COCO_1_RightTop = ElementByXPath("//div[@id='where-coco']/div[@class='right-top']/img[@class='cocoimg' and contains(@style,'top') ]");
           if (IsVisible(COCO_1_RightTop))
           {		   
           Click(COCO_1_RightTop);
		   Log("WhereIsCOCOBonus: click on COCO_1_RightTop Success");
           Wait();		
		   Wait(2);	 		   
           } 				   

           var COCO_2_LeftBot = ElementByXPath("//div[@id='where-coco']/div[@class='left-bot']/img[@class='lbimg_1' and contains(@style,'bottom') ]");
           if (IsVisible(COCO_2_LeftBot))
           {		   
           Click(COCO_2_LeftBot);
		   Log("WhereIsCOCOBonus: click on COCO_2_LeftBot Success");
           Wait();		
		   Wait(2);	 		   
           } 	

           var COCO_3_RightBot = ElementByXPath("//div[@id='where-coco']/div[@class='right-bot']/img[contains(@style,'bottom') ]");
           if (IsVisible(COCO_3_RightBot))
           {		   
           Click(COCO_3_RightBot);
		   Log("WhereIsCOCOBonus: click on COCO_3_RightBot Success");
           Wait();		
		   Wait(2);	 		   
           } 

           Wait();
           Wait(2);		   
		   
         }// end WhereIsCOCOBonus_Function

	
} //end public class
