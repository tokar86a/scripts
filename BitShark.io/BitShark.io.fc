

//==================//
//script Written by: ••AviramDayan•• 10/04/2020 17:30PM - Version 1
//Last Update: 30/05/2020 07:30AM - Version 3
//==================//

using System;
using System.IO;
using FaucetCollector.Script;
using OpenQA.Selenium;
//css_inc ShortLinkUtilities
//css_inc RecaptchaUtilities


public class BitShark : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings(DomainName_String)
            {
                new FaucetSetting(){Name="Email",Display="Email",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="Password",Display="Password",Type=EditorType.Password,Required=true},
				
                new FaucetSetting(){Name="MiningClick",Display="MiningClick - ON/OFF ",Type=EditorType.CheckBox,Default=true},		
                
			
                //insert user settings here
                //new FaucetSetting { 
                //    Name = "Name of your setting", 
                //    Display = "Display shown in Faucet Collector", 
                //    Type = EditorType.TextBox | EditorType.Password | EditorType.CheckBox | EditorType.Wallet | EditorType.Numeric | EditorType.ComboBox | EditorType.CheckComboBox, 
                //    Required = true | false, 
                //    Default = "Optionally a default value" | true | false | null.
                //    Items = new List<string> { "item1", "item2" } (only valid for ComboBox or CheckComboBox)
                //} 
            };
        }
    }



    //My DomainName
    string DomainName_String = "https://BitShark.io";
	//example - GoToUrl(DomainName_String);
    //==========//
	
	
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//
    public override void Start()
    {
		ad=false;
		//CheckForPopupsEnabled = false;
		
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "Bitshark | bitshark.io";

        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
        SuccessXPath = "//*"; //*[text()='']
        FailXPath = "//*"; //*[text()='']

        //Let Faucet Collector start up everything
        base.Start();
    }
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//
	
	
	
	bool ad;
	
	
    public override int DoInit()
    {
 
        //Let Faucet Collector continue.
        return base.DoInit();
    }

	
	
	
//==================//
//save Login Cookies 
//==================//
    public override bool IsLoggedIn()
    {

        //In this case we check for en element with the class "loggedIn"
		return ElementByXPath("//li//a[contains(text(),'Logout')] | //div[contains(@id,'go-to-dashboard') and @class='active']") != null;
		//return true;
    }
//==================//
//save Login Cookies 
//==================//
	
	
	
	
	
    /// <summary>
    /// This method gets called if IsLoggedIn returned false, right before the DoLogin method is called.
    /// </summary>
    public override int BeforeLogin()
    {

		GoToUrl(DomainName_String + "/dashboard" );
	    Wait();
		//IsLoggedIn();
 
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin();
    }
	
	
	

//========//
//DoLogin
//========//
 public override int DoLogin()
 {
	
	 
  //=====//
  //Login
  //=====//
  var ExitButton = ElementByXPath ("//li//a[contains(text(),'Logout')] | //div[contains(@id,'go-to-dashboard') and @class='active']"); 

  //if i NOT Login - go to Login Page
  if (!IsVisible(ExitButton))
  {
	   
        GoToUrl(DomainName_String + "/login" ); 
        Wait();		
        Wait(2);
		
        var EmailVAR = ElementByXPath("//div[@id='signin-form' and @class='active' ]//input[contains(@type,'email')] "); 
        if (IsVisible(EmailVAR)) 
	    {
         SetText(EmailVAR, GetSetting("Email"));
        }
		
		Wait(2);
		
        var PasswordVAR = ElementByXPath("//div[@id='signin-form' and @class='active' ]//input[contains(@type,'password')] ");		          
        if (IsVisible(PasswordVAR)) 
	    {
         SetText(PasswordVAR, GetPassword("Password"));
        }
		
		Wait(2);	

		Recaptcha_Function (); //call

		Wait(2);	
		
        var ButtonLog = ElementByXPath("//div[@id='signin-form' and @class='active' ]//button[contains(@type,'submit')] ");				  
        if (IsVisible(ButtonLog)) 
	    {
         Click(ButtonLog);
        }	

		Wait();		

  } // end ExitButton
  //=====//
 
        
   return base.DoLogin();
 }
//========//
//DoLogin
//========//
	

	
	
	
	
//==========//
//AfterLogin
//=========//
 public override int AfterLogin()
 {
 
	 
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterLogin();
 }
//==========//
//AfterLogin
//=========//
	
	
	

	
//=============//
//GetFaucetWaitTime
//=============//
 public override int GetFaucetWaitTime()
 {

    if(ad)
	{
        ad=false; //solve the problem in start - after he return to script again

          var MiningTime = ElementByXPath("//div[contains(@class,'text-danger')]");
          if (IsVisible(MiningTime))
		  {
		    Log("ad true - return to website time");
            int min;
            min = Convert.ToInt32(MiningTime.Text.Trim().Replace("minutes", "").Split(' ')[0])*60;  
            return min+75; //(add more custom sec 75sec for protection)
          } //end MiningTime
	

          if (!IsVisible(MiningTime))
		  {
	        Log("BackUp - return");
	        return 60*60;
          } //end MiningTime

	      /*
		  else if (!IsVisible(MiningTime)) //need help if int fail  
		  {
		  Log("return to custom time");
		    return GetWaitSetting();
		  }	
          */
		
    }	//end ad
	
		
   //let Faucet Collector continue.
   return base.GetFaucetWaitTime();
 }
//=============//
//GetFaucetWaitTime
//=============//
	
	
	
	

    public override int BeforeSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }


    public override int DoSolveCaptcha()
    {

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }


    public override int AfterSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }
	
	

    public override int BeforeSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }
	
	
	


//=============//
//DoSolveFaucet
//=============//
public override int DoSolveFaucet()
{

      //=============//
      //MiningClick
      //=============//
      if (GetBoolSetting("MiningClick"))
      {
	
		GoToUrl(DomainName_String + "/dashboard" );
	    Wait();


        var MiningTime = ElementByXPath("//div[contains(@class,'text-danger')]");
		
        if (IsVisible(MiningTime)) //visible
		{
		  Log("start - return to website time");
          int min;
          min = Convert.ToInt32(MiningTime.Text.Trim().Replace("minutes", "").Split(' ')[0])*60;  
          return min+75; //(add more custom sec 75sec for protection)
        } //end MiningTime - visible
	
	
        if (!IsVisible(MiningTime)) //not visible
		{
			  
          var MiningHere = ElementByXPath("//span[contains(@class,'text-success') and strong ]") ;	
          var Time_2_ToWaitForBreak = DateTime.Now.AddSeconds(420);
          while (IsVisible(MiningHere))
          {	
	  
		    //first check rcaptcha
            var RecaptchaCheck = ElementByXPath("//div[contains(@class,'recaptcha-form')]");	
            if (IsVisible(RecaptchaCheck))
            {
		    Log("MiningClick - RecaptchaCheck here - call it ");
            Recaptcha_Function(); //call
		    }
			
			Wait(2,5);	
		    Log("MiningClick - wait normal");
		  
	        var ClickIMG = ElementByXPath("//img[@class='miner-image']");
            Click(ClickIMG);
			Log("MiningClick - click");	
			
	        var ClickIMG_AfterAllClicksEnd = ElementByXPath("//img[@class='miner-image-running']");		   
            if (IsVisible(ClickIMG_AfterAllClicksEnd))
            {
            Driver.Navigate().Refresh();
		    Log("MiningClick - ClickIMG_AfterAllClicksEnd - Refresh Page");
		    } //end ClickIMG_AfterAllClicksEnd				
			
            if (!IsVisible(ElementByXPath ("//span[contains(@class,'text-success') and strong ]") ))
            {
            //ClaimSuccess(); //success to FC
            Wait(2);
		    Log("MiningClick - break - success");
            break; //after break the while  			 
            }
		  
	        if (DateTime.Now > Time_2_ToWaitForBreak)
            {
		    Log("MiningClick - break - Time_2_ToWaitForBreak");
            break; //break the wait loop
            }
		  
          } //end while (true)

		} //end MiningTime - NOT visible	
		  
      } //end MiningClick

      ad=true; //call to do success
	 
   //This faucet has nothing to do here. We will let Faucet Collector handle it.
   return base.DoSolveFaucet();
}
//=============//
//DoSolveFaucet
//=============//

	
	
	

    public override int AfterSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveFaucet();
    }
	
	

    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult();
    }
	
	
        //=================//
       //Recaptcha_Function
        //=================//

        public int Recaptcha_Function()
        {

	     //for recaptcha popup after click on button - ("//button[contains(@class,'reload')] | //button[contains(@id,'reload')] ")
          var RecaptchaOpen_Iframe = ElementByXPath ("//iframe[contains(@src,'recaptcha/api')]"); 
          if (IsVisible(RecaptchaOpen_Iframe))
		  {
            //SolveCaptcha if apper
            var result = base.DoSolveCaptcha();
            if (result > 0)
            {
                return Fail("Fail solving captcha");
            }
            RecaptchaUtility utility = new RecaptchaUtility(this);
            utility.DoSolve();
		  }

		return 0;
        }//end VOID_Template_Function
        //=================//	

	
} //public class dogeto
