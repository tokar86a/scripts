using System;
using FaucetCollector.Script;
//css_ref FaucetCollector.Captcha
//css_ref FaucetCollector.Utilities
public class SatoshiHeroScript : FaucetScript
{

    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings("https://satoshihero.com")
            {
                new FaucetSetting(){Name="User",Display="Email",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="Password",Display="Password",Type=EditorType.Password,Required=true},
                //insert user settings here
                //new FaucetSetting { 
                //    Name = "Name of your setting", 
                //    Display = "Display shown in Faucet Collector", 
                //    Type = EditorType.TextBox | EditorType.Password | EditorType.CheckBox | EditorType.Wallet | EditorType.Numeric | EditorType.ComboBox | EditorType.CheckComboBox, 
                //    Required = true | false, 
                //    Default = "Optionally a default value" | true | false | null.
                //    Items = new List<string> { "item1", "item2" } (only valid for ComboBox or CheckComboBox)
                //} 
            };
        }
    }

    /// <summary>
    /// This method gets called when the faucet is enabled and the GO button is clicked
    /// </summary>
    public override void Start()
    {
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "Satoshi Hero";

        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
        SuccessXPath = "//*"; //*[text()='']
        FailXPath = "//*"; //*[text()='']

        //Let Faucet Collector start up everything
        base.Start();
    }

    public override bool IsLoggedIn()
    {
        //save Login Cookies - Check if the "Logout" exist
        return ElementByXPath("//div[contains(@class,'v-list-item__title') and contains(text(),'Log Out')]") != null;
     

    }

    public override int BeforeLogin()
    {
        
        GoToUrl("https://satoshihero.com/en/game");
        

        return base.BeforeLogin();
    }

    public override int DoSolveCaptcha( )
    {
        var result=base.DoSolveCaptcha();
        if ( result>0 )
        {
            return result;
        }
        var recaptchautil= new FaucetCollector.Captcha.RecaptchaUtility(this);
        recaptchautil.DoSolve( );



        return result;
       
    }
    public override int DoLogin()
    {

        var ExitButton = ElementByXPath ("//div[contains(@class,'v-list-item__title') and contains(text(),'Log Out')]"); 
        //if i NOT Login - go to Login Page
        if (!IsVisible(ExitButton))
        {	
    
          GoToUrl("https://satoshihero.com/en/login");
          Wait();
     
          var EmailBox = ElementByXPath("//input[@name='login']");
          if (!IsVisible(EmailBox)) 
          { 
          return Fail("Fail Setting email, Email box is not visible"); 
          }
          SetText(EmailBox, GetSetting("User"));
          
          
          var PasswordBox = ElementByXPath("//input[@name='password']");
          if (!IsVisible(PasswordBox)) 
          { 
          return Fail("Faill setting Password, password box is not visible");
          }
          SetText(PasswordBox, GetPassword("Password"));
          
          Wait(2);
          
          var ButtonLogin = ElementByXPath("//button[contains(@class,'ma-auto signin')]");
          if (!IsVisible(ButtonLogin))
          {
            return Fail("Button login is not visible");
          
          }
          Click(ButtonLogin);
          
          Wait(1);
        
        }
              
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoLogin();
    }
    
    public override int DoSolveFaucet()
    {
        bool ClaimSuc=false;
        var ButtonClaim = ElementByXPath("//button[@class='btn-cont v-btn v-btn--contained theme--light v-size--default']");
        if (!IsVisible(ButtonClaim))
        {
         return Fail("ButtonClaim is not visible");
        }
        Click(ButtonClaim);
        
        Wait();

        var ButtonContinue_=ElementByXPath("//button[@class='v-btn v-btn--contained theme--light v-size--default']");
        if ( !IsVisible(ButtonContinue_) )
        {
            return Fail("Not visible button continue, there is a problem with the claim");
        }
        var BitplayIframe=ElementByXPath("//iframe[contains(@src,'bitplay')]");
        if ( BitplayIframe==null )
        {
            return Fail("BitplayIframe is not visible");
        }
        Driver.SwitchTo( ).Frame(BitplayIframe);
        ExecuteScript("showCaptcha(this)");

        var result=DoSolveCaptcha();
        if ( result>0 )
        {
            return result;
        }


        var SuccessClaim=ElementByXPath("//div[@class='alert alert-success text-center']//h5");
        if ( IsVisible(SuccessClaim) )
        {
            Log(SuccessClaim.Text);
            IsSuccess=true;
            ClaimSuc=true;
            ClaimSuccess( );
        }
        Driver.SwitchTo( ).DefaultContent( );
        Wait(1);


        ButtonContinue_=ElementByXPath("//button[@class='v-btn v-btn--contained theme--light v-size--default']");
        if ( IsVisible(ButtonContinue_) )
        {
            Click(ButtonContinue_);
            Wait(2);
            if ( !(ClaimSuc) )
            {
                var SuccClaim2=ElementByXPath("//p[contains(text(),'You recieved')]");
                if ( IsVisible(SuccClaim2) )
                {
                    Log(SuccClaim2.Text);
                    IsSuccess=true;
                    ClaimSuc=true;
                    ClaimSuccess( );
                }
            }
            else
            {
                return GetWaitSetting( );
            }
        }
        else
        {
            GoToUrl("https://satoshihero.com/en/game");
        }

        if ( ClaimSuc )
        {
            return GetWaitSetting( );
        }


        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveFaucet();
    }
    
}
