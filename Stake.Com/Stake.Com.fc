

//==================//
//script Written by: ••AviramDayan•• 26/05/2019 04:00PM
//Last Update: 18/06/2020 21:15PM - Version 11
//==================//

using System;
using System.Drawing;
using FaucetCollector.Script;
using System.Threading.Tasks;
using System.Collections.Generic;
using OpenQA.Selenium;
using OpenQA.Selenium.Interactions;

//css_inc recaptchaUtilities
//css_inc AntiBotLinksUtility
//css_ref ImageProcessing
//css_ref ProcessingImagesUsingLockBits
//css_inc GetestCaptcha

public class stake : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the mdogeods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
			
            return new FaucetSettings("https://stake.com/")
            {
                new FaucetSetting(){Name="Email",Display="Email OR UserName",Type=EditorType.TextBox,Required=false},
                new FaucetSetting(){Name="Password",Display="Password",Type=EditorType.Password,Required=false},
				
                new FaucetSetting() { Name = "btc", Display = "btc - claim", Type = EditorType.CheckBox, Default =true},
				/*
                new FaucetSetting() { Name = "eth", Display = "eth - claim", Type = EditorType.CheckBox, Default = false},	
                new FaucetSetting() { Name = "ltc", Display = "ltc - claim", Type = EditorType.CheckBox, Default = false},	
                new FaucetSetting() { Name = "doge", Display = "doge - claim", Type = EditorType.CheckBox, Default = false},	
                new FaucetSetting() { Name = "bch", Display = "bch - claim", Type = EditorType.CheckBox, Default = false},	
                new FaucetSetting() { Name = "xrp", Display = "xrp - claim", Type = EditorType.CheckBox, Default = false},	
				*/
                new FaucetSetting() { Name = "AffWithdraw", Display = "AffWithdraw", Type = EditorType.CheckBox, Default = false},	


            };
        }
    }

	
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//
    public override void Start()
    {
        ad = false;
       
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "stake.com";

		SuccessXPath = "//*";  //*[@id='']
        FailXPath = "//*"; //*[@id='']
	
        //TimerIsCountingUp = true;
		
        //Let Faucet Collector start up everything
        base.Start();
    }
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//

	
    bool ad; //custom bool


    public override int DoInit()
    {
	
        //Let Faucet Collector continue.
        return base.DoInit();
    }

	
//==================//
//save Login Cookies 
//==================//
    public override bool IsLoggedIn()
    {
	    //save Login Cookies - Check if the "Logout" exist
		return ElementByXPath("//div[contains(@class,'RightContentWrapper')]") != null;
	    //return true;
    }
//==================//
//save Login Cookies 
//==================//	





//=============//
//BeforeLogin
//=============//
    public override int BeforeLogin()
    {
		
		
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin();
    }
//=============//
//BeforeLogin
//=============//

	


	
//========//
//DoLogin
//========//
    public override int DoLogin()
    {
	
      var ExitButton = ElementByXPath("//div[contains(@class,'RightContentWrapper')]");
	
	 //if i NOT Login - go to Login Page
	 if (!IsVisible(ExitButton))
	 {

		GoToUrl("https://stake.com/?modal=login");
		Wait();		
		Wait(2);

        /*
        var LogInButton = ElementByXPath("//span[contains(text(),'Login')]");
	    if (IsVisible(LogInButton))
	    {
         Click(LogInButton);
        }
        */
        
		var box_user = ElementByXPath("//input[contains(@name,'email')]");
        SetText(box_user, GetSetting("Email"));
		
		Wait(2);
		
        var box_pass = ElementByXPath("//input[contains(@name,'password')]");
        SetText(box_pass, GetPassword("Password"));

		Wait(3);
        var RecaptchaOpen_Iframe = ElementByXPath ("//iframe[contains(@src,'recaptcha/api2/anchor')]"); 
        if (IsVisible(RecaptchaOpen_Iframe))
        {
          //SolveCaptcha if apper
          var result = base.DoSolveCaptcha();
          if (result > 0)
          {
              return Fail("Fail solving captcha");
							
          }
          RecaptchaUtility utility = new RecaptchaUtility(this);
          utility.DoSolve();
        }

		Wait(2);
		
        var ButtonLog = ElementByXPath("//button[contains(@type,'submit')]");
        Click(ButtonLog);
		Wait();	

	 } // end ExitButton

        
       return base.DoLogin();
    }
//========//
//DoLogin
//========//
 


//========//
//AfterLogin
//========//
 public override int AfterLogin()
 {
 
  
    //we are good to continue
    return base.AfterLogin();

 }
//========//
//AfterLogin
//========//


	

//================//
//GetFaucetWaitTime
//================//
    public override int GetFaucetWaitTime()
    {

        if (ad)
        {
		    //Log("return ad");
			ad=false;
            return GetWaitSetting();
        }

		//let Faucet Collector continue.
        return base.GetFaucetWaitTime();
    }
//================//
//GetFaucetWaitTime
//================//



    public override int BeforeSolveCaptcha()
    {
 
        //Return we are ready to proceed
        return base.BeforeSolveFaucet();
    }

	
    public override int DoSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }

	
    public override int AfterSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }

	
    public override int BeforeSolveFaucet()
    {
        //Return we can continue
        return base.BeforeSolveFaucet();
    }
  
	
	
//==============//
//DoSolveFaucet
//==============//
 public override int DoSolveFaucet()
  {
	  
	  
     //=============//
     //AffWithdraw
     //=============// 
     if (GetBoolSetting("AffWithdraw"))
     {
	 
		Log("AffWithdraw");
		GoToUrl("https://stake.com/affiliate/funds");

        var CheckWithdrawCommission = ElementByXPath("//div[contains(@class,'styles__Buttons')]//button[contains(@class,'Button__StyledButton') and (@disabled) ]"); 
        if (!IsVisible(CheckWithdrawCommission))
        {	
          Log("Claim_Function");
          var WithdrawCommission = ElementByXPath("//div[contains(@class,'styles__Buttons')]//button[contains(@class,'Button__StyledButton')]"); 
          Click(WithdrawCommission);
        }//end WithdrawCommission

	 }//end AffWithdraw
     //=============//	 
 

     GoToUrl("https://stake.com/?currency=btc&modal=vipReload");
	 Log("Go to faucet");	
		
	 Wait();
	 Wait(2);	

     var ReloadAvailable = ElementByXPath("//a[contains(@href,'Reload')]/span[contains(text(),'Reload')]"); 
     if (IsVisible(ReloadAvailable))
     {
	    Log("ReloadAvailable");	

		//======//
		//btc//
		//======//
        if (GetBoolSetting("btc"))
        {	
        FaucetButton_Function(); //call
	
        Menu_Function(); //call

	    Wait(2);

        var btc_VAR = ElementByXPath("//li[1]/button[contains(@class,'Button__StyledButton')]");
        if (IsVisible(btc_VAR))
        {		
		Log("btc");		
        Click(btc_VAR);
        }//end btc_VAR
		
	    Wait(2);
		
        BalanceNeedToBeZero_Function();
		
	    Wait(2);
		
        Claim_Function(); //call
		}
        //=====//	
	
		//======//
		//eth//
		//======//
        if (GetBoolSetting("eth"))
        {
        FaucetButton_Function(); //call
		
        Menu_Function(); //call

	    Wait(2);

        var eth_VAR = ElementByXPath("//li[2]/button[contains(@class,'Button__StyledButton')]");
        if (IsVisible(eth_VAR))
        {	
		Log("eth");		
        Click(eth_VAR);
        }//end eth_VAR
		
	    Wait(2);
		
        BalanceNeedToBeZero_Function();
		
	    Wait(2);
		
        Claim_Function(); //call
		}
        //=====//		
	
		//======//
		//ltc//
		//======//
        if (GetBoolSetting("ltc"))
        {
        FaucetButton_Function(); //call
		
        Menu_Function(); //call

	    Wait(2);

        var ltc_VAR = ElementByXPath("//li[3]/button[contains(@class,'Button__StyledButton')]");
        if (IsVisible(ltc_VAR))
        {	
		Log("ltc");			
        Click(ltc_VAR);
        }//end ltc_VAR
		
	    Wait(2);
		
        BalanceNeedToBeZero_Function();
		
	    Wait(2);
		
        Claim_Function(); //call
		}
        //=====//		
			
		//======//
		//doge//
		//======//
        if (GetBoolSetting("doge"))
        {
        FaucetButton_Function(); //call
		
        Menu_Function(); //call

	    Wait(2);

        var doge_VAR = ElementByXPath("//li[4]/button[contains(@class,'Button__StyledButton')]");
        if (IsVisible(doge_VAR))
        {	
		Log("doge");	
        Click(doge_VAR);
        }//end doge_VAR
		
	    Wait(2);
		
        BalanceNeedToBeZero_Function();
		
	    Wait(2);
		
        Claim_Function(); //call
		}
        //=====//				
			
		//======//
		//bch//
		//======//
        if (GetBoolSetting("bch"))
        {
        FaucetButton_Function(); //call
	
        Menu_Function(); //call

	    Wait(2);

        var bch_VAR = ElementByXPath("//li[5]/button[contains(@class,'Button__StyledButton')]");
        if (IsVisible(bch_VAR))
        {	
		Log("bch");
        Click(bch_VAR);
        }//end bch_VAR	
		
	    Wait(2);
		
        BalanceNeedToBeZero_Function();
		
	    Wait(2);
		
        Claim_Function(); //call
		}
        //=====//				
			
		//======//
		//xrp//
		//======//
        if (GetBoolSetting("xrp"))
        {
        FaucetButton_Function(); //call
		
        Menu_Function(); //call

	    Wait(2);

        var xrp_VAR = ElementByXPath("//li[6]/button[contains(@class,'Button__StyledButton')]");
        if (IsVisible(xrp_VAR))
        {	
		Log("xrp");
        Click(xrp_VAR);
        }//end xrp_VAR	
		
	    Wait(2);
		
        BalanceNeedToBeZero_Function();
		
	    Wait(2);
		
        Claim_Function(); //call
		}
        //=====//				
		
	 }

		return Time_Function(); //call to function time
	
        //We are good to continue
        return base.DoSolveFaucet();
 }
//==============//
//DoSolveFaucet
//==============///
	
	
	
	
	
//==============//
//AfterSolveFaucet
//==============//
  public override int AfterSolveFaucet()
  {

   //This faucet has nothing to do here. We will let Faucet Collector handle it.
   return base.AfterSolveFaucet();
   
  }
	
//==============//
//AfterSolveFaucet
//==============//



    /// <summary>
    /// This mdogeod gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet mdogeods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start mdogeod)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult();
    }


	
        //=================//
       //Time_Function
        //=================//
        public int Time_Function()
        {
			
           var MinVar = ElementByXPath("//article[contains(@class,'maincontent')]//span[2]/span[1]") ;
		   var SecVar = ElementByXPath("//article[contains(@class,'maincontent')]//span[3]/span[1]") ;

           if (IsVisible(MinVar))
           {
	         Log("ClaimBTC - WaitTimerText apper - return to site time"); 
             int min,sec;
             min = Convert.ToInt32(MinVar.Text.Trim().Replace("m.", "").Replace("s.", "").Split(' ')[0])*60;
             sec = Convert.ToInt32(SecVar.Text.Trim().Replace("m.", "").Replace("s.", "").Split(' ')[1]);
             return min+sec;
           } 

           if (!IsVisible(MinVar))
           {
	            Log("ClaimBTC - return to your time"); 
		        return GetWaitSetting();
           }

           return 0;		
        }//end Time_Function
        //=================//	


        //=========//
        //FaucetButton_Function
		//=========//
        public void FaucetButton_Function()
        {	
		/*
        var DepositButton = ElementByXPath("//a/span[contains(text(),'Deposit')]");
        Click(DepositButton);
		
		Wait(2);	
		
        var FaucetTAB = ElementByXPath("//a/span[contains(text(),'Faucet')]");
        Click(FaucetTAB);
		
		Wait(2);	
        */
		}//end FaucetButton_Function
		//=========//
		
		
        //=========//
        //Menu_Function
		//=========//
        public void Menu_Function()
        {	
		
          var MenuVAR = ElementByXPath("//form[contains(@class,'styles__Form')]//button[contains(@class,'Button__StyledButton-sc-8bd3dp-0 jXTFLj')]"); 
          if (IsVisible(MenuVAR))
          {
            Log("Menu_Function");				  
		    Click(MenuVAR);			  
		  }
		  
		}//end Menu_Function
		//=========//
		
		
        //=========//
        //Claim_Function
		//=========//
        public void Claim_Function()
        {			
		
          var CheckClaim = ElementByXPath("//div[contains(@class,'styles__Buttons')]//button[contains(@class,'Button__StyledButton') and (@disabled) ]"); 
          if (!IsVisible(CheckClaim))
          {	
            Log("Claim_Function - claim button available after captch - do click");
            var ClaimVAR = ElementByXPath("//div[contains(@class,'styles__Buttons')]//button[contains(@class,'Button__StyledButton')]"); 
            Click(ClaimVAR);
          }//end ClaimVAR
		
		}//end Claim_Function
		//=========//


        //=========//
        //BalanceNeedToBeZero_Function
		//=========//
        public void BalanceNeedToBeZero_Function()
        {	
		
          var BalanceNeedToBeZero = ElementByXPath("//span[contains(text(),'Next claim available')]"); 
          if (!IsVisible(BalanceNeedToBeZero)) //if is not visible - BalanceNeedToBeZero - DoSolveCaptcha 
          {	
		    Log("faucet visible - do stuff");
		  
            var ReCaptchaIframe = ElementByXPath("//iframe[contains(@src,'recaptcha/api2/anchor')]"); 
            if (IsVisible(ReCaptchaIframe))
            {	
		      Log("call to solve captch");
              var result = DoSolveCaptcha(); //call to solve captch		 
		      ClaimSuccess(); //Marks the claim as a success
			  Log("Success");
		    }

		  }

		}// end BalanceNeedToBeZero_Function
		//=========//

	
} //end public class

