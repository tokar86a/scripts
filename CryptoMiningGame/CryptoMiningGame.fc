using FaucetCollector.Script;
using OpenQA.Selenium;
using System;
using System.Collections.Generic;
using System.Linq;
//css_ref FaucetCollector.Captcha
//css_ref FaucetCollector.Utilities
class CryptoMiningGameScript : FaucetScript
{
    public override FaucetSettings Settings
    {
        get
        {

            return new FaucetSettings ( BaseUrl )
                {
                    new FaucetSetting ( )
                    {
                        Name="User",
                        Type=EditorType.TextBox,
                        Required=true,
                        Display="Username",
                    },
                    new FaucetSetting()
                    {
                        Name="Pass",
                        Type=EditorType.Password,
                        Required=true,
                        Display="Password"
                    },
                    new FaucetSetting ( )
                    {
                        Name="Refill",
                        Type=EditorType.CheckBox,
                        Default=true,
                        Display="Refill Energy if it's avaible"
                    },
                    new FaucetSetting ( )
                    {
                        Name="Job",
                        Type=EditorType.ComboBox,
                        Default=ListJobs.FirstOrDefault(),
                        Display="Select Job to claim",
                        Items=ListJobs
                    },
                    new FaucetSetting ( )
                    {
                        Name="JobMinutes",
                        Type=EditorType.TextBox,
                        Default="10",
                        Display="Minutes to claim job:"
                    },
                    new FaucetSetting ( )
                    {
                        Name="UseShortlink",
                        Type=EditorType.CheckBox,
                        Display="Use Shortlink for Antibot if it's available",
                        Default=true

                    },
                    new FaucetSetting ( )
                    {
                        Name="Mining",
                        Type=EditorType.ComboBox,
                        Items=ListMiningCoins,
                        Default=ListMiningCoins.FirstOrDefault(),
                        Display="Coin selected for mining"
                    },
                    new FaucetSetting ( )
                    {
                        Name="DailyBonus",
                        Type=EditorType.CheckBox,
                        Default=true,
                        Display="Try to claim daily bonus"
                    }

                };
        }

    }
    public const string BaseUrl="https://cryptomininggame.com/";



    FaucetCollector.Utilities.HumanActions.DriverHumanActions driver { get; set; }

    public List<string> ListMiningCoins=new List<string>
    {
        "none",
        "bitcoin",
        "doge",
        "litecoin",
        "dash",
        "ethereum",
        "bitcoin cash"
    };
    public List<string> ListJobs=new List<string>
    {
        "None",
        "Crystal",
        "CRYPTOCOINZ",
        "Satoshi",
        "Doge",
        "Litoshi",
        "Dash",
        "Ether",
        "BCH Satoshi",
        "Crypto Game Token"
    };
    public override void Start ( )
    {
        Title="CRYPTO|CMG";
        SuccessXPath="//div[@class='text-center alert fixtop alert-success']|//div[@id='result_details']";
        FailXPath="//div[@class='text-center alert fixtop alert-danger']";
        base.Start ( );
    }
    public override int DoInit ( )
    {
        driver=new FaucetCollector.Utilities.HumanActions.DriverHumanActions ( Driver );
        return base.DoInit ( );
    }
    public override int BeforeLogin ( )
    {
        var ModalLogin=ElementByXPath("//div[contains(@id,'modalLogin')]");
        if ( !IsVisible ( ModalLogin ) )
        {
            ModalLogin=ElementByXPath("//button[contains(@data-target,'modalLogin')]");
            if ( !IsVisible ( ModalLogin ) )
            {
                return Fail ( "Modal login not visible" );
            }
   
        }
        Click ( ModalLogin );
        return base.BeforeLogin ( );
    }
    public override bool IsLoggedIn ( )
    {
        return ElementByXPath ( "//a[contains(@href,'/logout')]" )!=null;
    }
    public override int DoLogin ( )
    {
        var UserBox=ElementByXPath("//input[@id='username']");
        if ( !IsVisible ( UserBox ) )
        {
            return Fail ( "User box not visible" );
        }

        SetText ( UserBox , GetSetting ( "User" ) );
        Wait ( 1 );

        var PasswordBox=ElementByXPath("//input[@id='password']");
        if ( !IsVisible ( PasswordBox ) )
        {
            return Fail ( "Password box not visible" );
        }
        SetText ( PasswordBox , GetPassword ( "Pass" ) );

        var result=DoSolveCaptcha();
        if ( result>0 )
        {
            return result;
        }
        var Submit=ElementByXPath("//button[@id='_submit']");
        if ( !IsVisible ( Submit ) )
        {
            return Fail ( "Submit button not found" );
        }
        // Sometimes ad block selenium click 
        ExecuteScript ( "arguments[0].click()" , Submit );

        return base.DoLogin ( );
    }

    public override int DoSolveCaptcha ( )
    {
        var CaptchaSelector=ElementByXPath("//select[@id='captchatype']");
        if ( IsVisible ( CaptchaSelector ) )
        {
            SelectOptionByValue ( CaptchaSelector , "g-recaptcha" );
            Wait ( 2,3 );
            DateTime timeout=DateTime.Now.AddSeconds(20);
            // Wait some time to recaptcha appear
            while(!IsVisible(ElementByXPath( "//div[@class='g-recaptcha']" )) && DateTime.Now<timeout  )
            {
                Wait ( );
            }
            
        }

        return base.DoSolveCaptcha ( );
    }
    private AntibotOption LastAntibotUsed { get; set; }
    public override int BeforeSolveFaucet ( )
    {
        #region antibot
        var Antibot=ElementByXPath("//a[@href='/antibot']");
        if ( IsVisible ( Antibot ) )
        {
            Click ( Antibot );
            Wait ( 3 , 4 );
            if ( IsVisibleAntiBot ( ) )
            {
                SolveAntibotWithBest ( );

                CheckFaucetResult ( );
            }
        }
        #endregion
        #region Refill_Energy
        if ( GetBoolSetting ( "Refill" ) )
        {
            var RefillEnergyBtn=ElementByXPath("//button[@data-target='#modalRefillLink']");
            if ( IsVisible ( RefillEnergyBtn ) )
            {
                Click ( RefillEnergyBtn );
                Wait ( 2 );
                SolveAntibotWithBest ( );
            }
        }
        #endregion
        #region dailybonus
        if ( IsAvailableDailyBonus ( ) )
        {

            ClaimDailyBonus ( );
        }
        #endregion
        return base.BeforeSolveFaucet ( );
    }

    public override int DoSolveFaucet ( )
    {
        #region Jobs
        var SelectedJob=this.SelectedJob;
        if ( SelectedJob!=JobType.None && IsJobAvailable() )
        {
            GoToUrl ( JobsUrl );
            Wait (3,4 );
            FinishStartedJobs ( );


            int minutes=GetMinutesofWorkRemaining();
            if ( minutes>0 )
            {
                 bool Claimed=ClaimJob ( );
                if ( Claimed )
                {
                    CheckFaucetResult ( );
                    Log ( "Job Claimed successfully" );
                }
            }
        }
        #endregion

        #region Mining

        var MOption=SelectedMiningOption;
        if ( SelectedMiningOption!=MiningType.none )
        {
            GoToUrl ( MiningUrl );
            Wait ( );

            var XPathMiningButton=GetXPathMiningButton(MOption);
            if ( !string.IsNullOrEmpty ( XPathMiningButton ) )
            {
                var ButtonMining=ElementByXPath(XPathMiningButton);
                if ( IsVisible ( ButtonMining ) )
                {
                    Click ( ButtonMining );
                    if ( IsVisibleAntiBot ( ) )
                    {
                        SolveAntibotWithBest ( );
                    }
                    Wait ( );
                    CheckFaucetResult ( );
                }
                else
                {
                    Log ( "Script is already mining, will wait to mine again" );
                }
            }
        }
        #endregion
        return GetWaitSetting ( );
        
    }

    #region antibot
    public void SolveAntibotWithBest ( )
    {
        var ModalAntibot=ElementByXPath("//button[@data-target='#modalAntibotLink']");
        if ( !IsVisible ( ModalAntibot ) )
        {
            return;
        }

        Click ( ModalAntibot );
        Wait ( 2 );

        var AntibotOpt=GetAvailableAntibot();
        if ( AntibotOpt!=null )
        {

            if ( LastAntibotUsed==AntibotOption.Shortlink )
            {
                FaucetCollector.Utilities.ShortLinkBypasser shortLinkBypasser =new FaucetCollector.Utilities.ShortLinkBypasser(this);
                Click ( AntibotOpt );
                Wait ( );
                if ( shortLinkBypasser.IsValidShortLink ( ) )
                {
                    bool Sol=shortLinkBypasser.DoShortLink ( );
                    if ( !Sol )
                    {
                        Log ( "Something is wrong  "+Driver.Url+" Is not a valid shortlink or is not correctly added" );
                    }
                }
                else
                {
                    Log ( "Something is wrong  "+Driver.Url+" Is not a valid shortlink or is not correctly added" );
                }

            }
            else
            {
                Click ( AntibotOpt );
                Wait ( 4 );

                if ( IsValidAntibot ( ) )
                {
                    bool Sol=SolveAntibot ( );
                    if ( !Sol )
                    {
                        Log ( "Fail solving antibot" );
                    }
                    else
                    {
                        Log ( "Antibot solved successfully" );
                    }
                }

            }

        }

    }
    public bool IsVisibleAntiBot ( )
    {
       return IsVisible(ElementByXPath("//button[@data-target='#modalAntibotLink']"));
    }


    public IWebElement GetAvailableAntibot ( )
    {
       
        var AntibotOptions=ElementsByXPath("//button[@class='btn btn-block btn-sm btn-info']").Where(x=>IsVisible(x)).ToList();
        if ( AntibotOptions.Count>0 )
        {
            var SelectedAntibot=this.SelectedAntibot;
            var FirstOption=SelectedAntibot==AntibotOption.Shortlink?AntibotOptions.FirstOrDefault(x => !x.Text.ToLower().Contains("cmg")):AntibotOptions.FirstOrDefault(x => x.Text.ToLower().Contains("cmg"));

            if ( FirstOption!=null )
            {
                LastAntibotUsed=SelectedAntibot;
                return FirstOption;
            }


            LastAntibotUsed=SelectedAntibot==AntibotOption.Shortlink ? AntibotOption.CmgAntibot : AntibotOption.Shortlink;

            Log ( "First option selected for antibot is not available, using: "+LastAntibotUsed.ToString ( ) );

            return AntibotOptions[Random ( 0 , AntibotOptions.Count )];

        }

        return null;
    }
   
    public enum AntibotOption
    {
        Shortlink,
        CmgAntibot
    }

    public AntibotOption SelectedAntibot
    {
        get
        {
            if ( GetBoolSetting ( "UseShortlink" ) )
            {
                return AntibotOption.Shortlink;
            }
            return AntibotOption.CmgAntibot;
        }
    }

  
    public bool IsValidAntibot ( )
    {
        Wait(2);
        return ElementByXPath ( "//div[@id='antispyware_block']" )!=null;
    }

    public bool SolveAntibot ( )
    {

        driver=new FaucetCollector.Utilities.HumanActions.DriverHumanActions(Driver);
        var Timer =ElementByXPath("//span[@id='beattime']");
        var Block=ElementByXPath("//div[@id='antispyware_block']");
        DateTime Timeout=DateTime.Now.AddSeconds(65);
        while ( IsVisible ( Timer )&&IsVisible ( Block ) && DateTime.Now<Timeout )
        {
            Wait ( );

            Block=ElementByXPath ( "//div[@id='antispyware_block']" );
            Timer=ElementByXPath ( "//span[@id='beattime']" );

        }
        Wait (3 );
        var ButtonGo=ElementByXPath("//form[contains(@action,'antibot')]//button[@class='btn btn-scifi mining']");
        if ( !IsVisible ( ButtonGo ) )
        {
            return false;
        }
        driver.Click ( ButtonGo );
        Wait ( 2,3 );
        ButtonGo=ElementByXPath ("//form[contains(@action,'antibot')]//button[@class='btn btn-scifi mining']");
        if ( IsVisible(ButtonGo ))
        {
            Click ( ButtonGo );
        }
        return true;

    }
    #endregion
    #region Jobs
    public const string JobsUrl=BaseUrl+"jobs";
    public enum JobType
    {
        None,
        Crystal,
        CRYPTOCOINZ,
        Satoshi,
        Doge,
        Litoshi,
        Dash,
        Ether,
        BCH_Satoshi,
        Crypto_Game_Token
    }

   
    public JobType SelectedJob
    {
        get
        {
            return (JobType)Enum.Parse(typeof(JobType), GetSetting ( "Job" ).Trim ( ).Replace ( ' ' , '_' ) );
        }
    }
    public int JobMinutes
    {
        get
        {
            try
            {
                return Convert.ToInt32 ( GetSetting ( "JobMinutes" ) );


            }
            catch ( Exception )
            {
                return 1;
            }
        }
    }

    public  bool IsJobAvailable ( )
    {
        DateTime Nextclaim;

        if(DateTime.TryParse( GetSetting("NextJobAvailableTime"),out Nextclaim )){

            if ( DateTime.Now>Nextclaim )
            {
                return true;
            }
            else
            {
                Log ( "You need to wait "+( Nextclaim-DateTime.Now ).TotalMinutes.ToString()+" for the next job" );
                return false;
            }
        }

        return true;
    }

    public string GetValueNeeded (JobType job )
    {
        return job==JobType.Satoshi ? "satoshi" : job==JobType.Litoshi ? "litoshi" : job==JobType.Ether ? "ether" : job==JobType.Doge ? "doge" : job==JobType.Dash ? "dash" : job==JobType.BCH_Satoshi ? "bchsatoshi" : job==JobType.Crypto_Game_Token ? "cmg" : string.Empty;
    }

    public void FinishStartedJobs ( )
    {
        var FinishedJobs=ElementsByXPath("//button[contains(@class,'btn btn-scifi mining')]").Where(x=>IsVisible(x)).ToList();

        FinishedJobs.ForEach ( x => FinishJob ( x ) );
    }
    public void FinishJob(IWebElement JobButton )
    {
        Click ( JobButton );
        Wait ( 2 );

        CheckFaucetResult ( );

        CloseJobResult ( );
    }

    public void CloseJobResult ( )
    {
        var JobWindow=ElementByXPath("//div[@id='job_result']");
        if ( IsVisible ( JobWindow ) ){

            Click ( JobWindow );
            Wait ( 1 );
        }
    }
    public bool ClaimJob ( )
    {
        Wait ( 3 , 4 );
        IWebElement EnergyBox;
        IWebElement ButtonStartJob;
        string NeddedValue=string.Empty;
        var SelectedJob=this.SelectedJob;
        if ( SelectedJob==JobType.Crystal )
        {
            EnergyBox=ElementByXPath ( "//form[@id='crystal_job']//input[@name='energy']" );
            ButtonStartJob=ElementByXPath ( "//div[@id='start_crystal_job']//button[contains(@name,'startworking')]" );
        }
        else if ( SelectedJob==JobType.CRYPTOCOINZ )
        {
            EnergyBox=ElementByXPath ( "//div[@class='panel panel-card panel-job'][2]//input[@name='energy']" );
            ButtonStartJob=ElementByXPath ( "//div[@class='panel panel-card panel-job'][2]//button[@name='startworking']" );

        }
        else
        {
            NeddedValue=GetValueNeeded ( SelectedJob );
            EnergyBox=ElementByXPath ( "//div[@class='panel panel-card panel-job'][3]//input[@name='energy']" );
            ButtonStartJob=ElementByXPath ( "//div[@class='panel panel-card panel-job'][3]//button[@name='startworking']" );
        }

        if(!IsVisible(EnergyBox) || !IsVisible(ButtonStartJob) )
        {
            Log ( "Job start failed can't find the button or energy box, probably we are already doing job" );

            return false;
        }

        int MinutesRemaining=GetMinutesofWorkRemaining();

        SetText ( EnergyBox , MinutesRemaining>JobMinutes ? JobMinutes.ToString() : MinutesRemaining.ToString ( ) );
        if ( !string.IsNullOrWhiteSpace ( NeddedValue) )
        {
            var JobSelect=ElementByXPath("//select[contains(@name,'job_subtype')]");
            if ( !IsVisible ( JobSelect ) )
            {
                return false;
            }
            SelectOptionByValue ( JobSelect , NeddedValue );

        }
        Wait ( 1 );

        Click ( ButtonStartJob );

        Wait ( 1 );
        if ( IsVisibleAntiBot ( ) )
        {
            SolveAntibotWithBest ( );
        }

        return true;
    }
    /// <summary>
    /// Get minutes available in jobs section 
    /// </summary>
    /// <returns></returns>
    public int GetMinutesofWorkRemaining ( )
    {
        var RemainingTime=ElementByXPath("//span[@id='workinghoursremaining']");
        if ( IsVisible ( RemainingTime ) )
        {
            var SplittedText=RemainingTime.Text.ToLower().Replace("min","").Split('h');
            int min;
            int hour;
            if ( int.TryParse ( SplittedText[0] , out hour )&&int.TryParse ( SplittedText[1] , out min ) )
            {
                int TotalTime=hour*60+min;
                Log ( "You have "+TotalTime.ToString ( )+"Minutes remaining of work" );
                return TotalTime;
            }
        }
        int NextReset=this.NextReset;
        Log ( "You have 0 minutes remaining of work you need to wait"+NextReset.ToString()+" minutes for next job" );
        SetSetting ( "NextJobAvailableTime" , DateTime.Now.AddMinutes ( NextReset ) );
        return 0;
    }
    #endregion
    #region Mining
    public const string MiningUrl=BaseUrl+"mining";
    public enum MiningType
    {
        none,
        bitcoin,
        doge,
        litecoin,
        dash,
        ethereum,
        bitcoin_cash

    }

    public MiningType SelectedMiningOption
    {

        get
        {
            return ( MiningType )Enum.Parse ( typeof ( MiningType ) , GetSetting ( "Mining" ).Trim ( ).Replace ( ' ' , '_' ) );
        }
    }

    public string GetXPathMiningButton (MiningType minings )
    {
        return minings==MiningType.bitcoin ? "//div[@id='satoshi_mining_panel']//button[@class='btn btn-scifi']" : 
            minings==MiningType.doge ? "//div[@id='doge_mining_panel']//button[@class='btn btn-scifi']" : 
            minings==MiningType.litecoin? "//div[@id='litoshi_mining_panel']//button[@class='btn btn-scifi']" : 
            minings==MiningType.dash? "//div[@id='dash_mining_panel']//button[@class='btn btn-scifi']" : 
            minings==MiningType.ethereum? "//div[@id='ethereum_mining_panel']//button[@class='btn btn-scifi']" : 
            minings==MiningType.bitcoin_cash? "//div[@id='bitcoincash_mining_panel']//button[@class='btn btn-scifi']" :
            string.Empty;

    }
    #endregion
    #region dailybonus
    public const string DailyBonus=BaseUrl+"daily-bonus";
    public bool IsAvailableDailyBonus ( )
    {
        if ( !IsEnabledDailyBonus )
        {
            return false;
        }

        DateTime NextClaimTime;

        if(DateTime.TryParse( GetSetting ( "NextClaimTime" ),out NextClaimTime ) )
        {
            if ( DateTime.Now>NextClaimTime )
            {
                return true;
            }
            else
            {
                Log ( "You need to wait "+( NextClaimTime-DateTime.Now ).TotalMinutes.ToString ( )+" to claim next daily bonus" );
                return false;
            }
        }

        return true;
    }
    public bool IsEnabledDailyBonus
    {
        get
        {
            return GetBoolSetting ( "DailyBonus" );
        }
    }

    public int NextReset
    {
        get
        {
            var TimeEl=ElementByXPath("//span[@id='serverTime']");
            if ( IsVisible ( TimeEl ) )
            {
                int h,m,s;

                var Splited=TimeEl.Text.Trim().Split(' ')[0].Split(':');

                if ( int.TryParse ( Splited[0] , out h )&&int.TryParse ( Splited[1] , out m )&&int.TryParse ( Splited[2] , out s ) )
                {

                    return ( 24-h )*60+( 60-m )+( s>=30 ? 1 : 0 );

                }
            }
            // fail getting server time return local time.
            return 0;
        }
    }

    public void ClaimDailyBonus ( )
    {
        GoToUrl ( DailyBonus );
        Wait ( 3 );

        var ClaimDailyBonusBtn=ElementByXPath("//button[contains(@class,'btn btn-default')]");
        DateTime Timeout=DateTime.Now.AddSeconds(10);
        while ( !IsVisible ( ClaimDailyBonusBtn )  && DateTime.Now<Timeout)
        {
            Wait ( );
            ClaimDailyBonusBtn=ElementByXPath ( "//button[contains(@class,'btn btn-default')]" );

        }

        if ( IsVisible ( ClaimDailyBonusBtn ) )
        {
            Click ( ClaimDailyBonusBtn );
            Wait ( 3 );
            if ( IsVisibleAntiBot ( ) )
            {

                SolveAntibotWithBest ( );

            }
            else
            {
                CheckFaucetResult ( );
                if ( IsSuccess )
                {
                    SetSetting ( "NextClaimTime" , DateTime.Now.AddMinutes ( NextReset ) );
                }
            }
        }
        else
        {
            Log ( "Daily bonus is not available" );
            SetSetting ( "NextClaimTime" , DateTime.Now.AddMinutes ( NextReset ) );
        }

    }

    #endregion
}
