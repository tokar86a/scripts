using System;
using System.Text.RegularExpressions;
using FaucetCollector.Script;
using OpenQA.Selenium;
//css_ref FaucetCollector.Utilities

public class BonusBitcoinScript : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings("http://bonusbitcoin.co/faucet/")
            {
                //We have a setting to get the email address used for bonusbitcoin
                new FaucetSetting() { Name = "Email", Display = "Email", Type = EditorType.TextBox, Required = true },
                new FaucetSetting(){Name="Adblock",Display="Use code adblock",Type=EditorType.CheckBox,Default=true},
                //And we also need the password
                new FaucetSetting() { Name = "Password", Display = "Password", Type = EditorType.Password, Required = true },
                new FaucetSetting(){Name="SwitchC",Display="SwitchCaptcha if the other is not visible",Type=EditorType.CheckBox,Default=true},

                //Option to use SolveMedia or reCAPTCHA
                new FaucetSetting() { Name = "UseSolveMedia", Display = "Use SolveMedia (instead of reCAPTCHA)", Type = EditorType.CheckBox, Default = true },
                 new FaucetSetting(){Name="SolveMediaRetry", Display="Do three SolveMedia attempts when failed to answer",Type=EditorType.CheckBox,Default=true},
                //Option to select the claim amount - random or average
                new FaucetSetting() { Name = "ClaimAverage", Display = "Receive the average claim amount (instead of random)", Type = EditorType.CheckBox }
            };
        }
    }

    /// <summary>
    /// This method gets called when the faucet is enabled and the GO button is clicked
    /// </summary>
    public void CheckForPopup()
    {
        var Popup = ElementByXPath("//img[@title='close']");
        if (IsVisible(Popup))
        {
            ExecuteScript("arguments[0].click()", Popup);
            Wait(1);
        }


    }


    public override void Start()
    {
        OverriteSolvemedia = false;
        //Title that shows in the browser. Is used to close popups
        Title = "bonus bitcoin";

        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
        SuccessXPath = "//*[@id='FaucetClaimModal']";
        FailXPath = "//*[@id='MessageModal']";

        //Let Faucet Collector start up everything
        base.Start();
    }
    public FaucetCollector.Utilities.Adblock Adblock { get; set; }
    private void DoBlock( )
    {
        if ( GetBoolSetting("Adblock") )
        {
            Adblock.DestroyAds( );
        }
    }
    public void RefreshSolvemedia ( )
    {
        ExecuteScript ( "ACPuzzle.reload();" );
    }
    public int SolveCapt ( )
    {
        var XPathAdcopyRefresh = "//a[@id='adcopy-link-refresh']";

        int tries = 0;
        bool FirstTime = true;
        while ( ( IsVisible ( ElementByXPath ( "//input[@id='adcopy_response']|//input[@name='adcopy_response']" ) )&&tries<3&&!OverriteSolvemedia&&GetBoolSetting ( "SolveMediaRetry" ) )||FirstTime )
        {
            FirstTime=false;
            var result = DoSolveCaptcha();
            if ( result>0&&result!=9999 )
            {
                var AdcopyRefresh = ElementByXPath(XPathAdcopyRefresh);
                if ( IsVisible ( AdcopyRefresh ) )
                {
                    RefreshSolvemedia ( );
                    Wait ( 2 );
                }
                tries++;
                continue;
            }

            if ( ( Context.CaptchaResult.Result.Length<=3||Context.CaptchaResult.Result=="7775" )&&result!=9999 )
            {
                var AdcopyRefresh = ElementByXPath(XPathAdcopyRefresh);
                if ( IsVisible ( AdcopyRefresh ) )
                {
                    RefreshSolvemedia ( );
                    Wait ( 3 );
                }
                tries++;

                continue;
            }

            return result!=9999 ? result : 0;
        }
        if ( tries>=3&&GetBoolSetting ( "SwitchC" ) )
        {

            OverriteSolvemedia=true;
        }


        return DoSolveCaptcha ( );
    }
    private bool OverriteSolvemedia { get; set; }
    public override int DoInit( )
    {
        Adblock=new FaucetCollector.Utilities.Adblock(this);
        return base.DoInit( );
    }
    /// <summary>
    /// This method gets called after the Start method, here you need to return if we are logged in or not.
    /// If you return false then it will call the BeforeLogin, Login and AfterLogin methods so you can login.
    /// After those Login methods are called it will call this IsLoggedIn method again to see if the login did succeed.
    /// If you return true Faucet Collector will store all cookies so it will probably be already logged in on the next attempt.
    /// </summary>
    public override bool IsLoggedIn()
    {
        //If there is an element that has the id "EmailInput" then we are logged in - that element is only present when you are logged in.
        return ElementById("EmailInput") != null;
    }

    /// <summary>
    /// This method gets called if IsLoggedIn returned false, right before the DoLogin method is called.
    /// </summary>
    public override int BeforeLogin()
    {
        DoBlock( );
        //Hide the cookie banner
        var banner = ElementByXPath("//div[contains(@class, 'cc_banner-wrapper')]");
        if (banner != null)
        {
            ExecuteScript("arguments[0].style.visibility='hidden'", banner);
        }
        CheckForPopups();
        //Look for the signin button
        var signInButton = ElementById("PageContent_SignInButton");
        if (signInButton == null)
        {
            //Signin button not found, return an error. 
            //It will automatically reload the page and try again in 10-15 seconds.
            return Fail("Signin button not found.");
        }

        //Signin button found, now click it.
        Click(signInButton);

        //let Faucet Collector continue.
        return base.BeforeLogin();
    }

    /// <summary>
    /// This method gets called after BeforeLogin if IsLoggedIn returned false.
    /// It can be used to actually login the user/enter wallet details in the faucet
    /// </summary>
    /// <returns></returns>
    public override int DoLogin()
    {
        //Find the input field that holds the email address
        var signInEmail = ElementById("SignInEmailInput");
        if (signInEmail == null)
        {
            //We couldn't find it. Register it as a fail so it can reload the page and try again in 10-15 seconds.
            return Fail("Signin email input not found.");
        }

        var signInPassword = ElementById("SignInPasswordInput");
        if (signInPassword == null)
        {
            //We couldn't find it. Register it as a fail so it can reload the page and try again in 10-15 seconds.
            return Fail("Signin password input not found.");
        }

        //Email and password input found, update the value of the input with the email address and password the user entered in Faucet Collector
        SetText(signInEmail, GetSetting("Email"));
        SetText(signInPassword, GetPassword("Password"));
        var result = DoSolveCaptcha();
        if (result > 0)
        {
            return Fail("Fail solving captcha");
        }
        //Now we search for the login submit button
        var loginButton = ElementByXPath("//button[contains(@class,'btn btn-primary') and @type='submit']");
        if (loginButton == null)
        {
            //We couldn't find it. Register it as a fail so it can reload the page and try again in 10-15 seconds.
            return Fail("Login button not found.");
        }

        //We are ready to click the login button.
        Click(loginButton);

        //Let Faucet Collector continue
        return base.DoLogin();
    }

    /// <summary>
    /// This method gets called after the DoLogin method.
    /// </summary>
    public override int AfterLogin()
    {
        //we don't need to do anything here for this faucet - let Faucet Collector do its stuff.
        return base.AfterLogin();
    }

    /// <summary>
    /// This method gets called after the login methods are successful, so we are logged into the faucet.
    /// If the faucet is not yet ready to claim you should return a TimeStamp value to return how long it takes before the Faucet claim can be done.
    /// This is used to pause the script while the faucet its timer runs out.
    /// </summary>
    public override int GetFaucetWaitTime()
    {
        Wait(4, 5);
        DoBlock( );
        var claimButton = ElementByXPath("//button[contains(@class,'btn btn-primary btn-lg')]");
        if (claimButton == null)
        {
            return Fail("Claim button not found.");
        }

        var buttonText = claimButton.Text;
        if (string.IsNullOrEmpty(buttonText) || string.Equals(buttonText.Trim(), "Claim now!", StringComparison.OrdinalIgnoreCase))
        {
            //We can claim now
            return 0;
        }


        //Text must be something like "Claim again in 14:29"
        var waitText = buttonText.Trim().Replace("Claim again in ", "").Trim();
        TimeSpan timespan;
        if (!TimeSpan.TryParse("00:" + waitText, out timespan))
        {
            return Fail("Unable to get the wait time from " + waitText);
        }

        //Return the time we have to wait for the faucet to be ready again
        return (int)timespan.TotalSeconds;
    }

    /// <summary>
    /// This method is called right before a captcha will be solved.
    /// </summary>
    public override int BeforeSolveCaptcha()
    {
        //Check if the user wants to do SolveMedia or reCAPTCHA.
        if (GetBoolSetting("UseSolveMedia"))
        {
            //Make sure SolveMedia is active by clicking the link.
            Click(ElementByLinkText("Switch to SolveMedia captcha"));
        }
        else
        {
            //Make sure reCAPTCHA is active by clicking the link.
            Click(ElementByLinkText("Switch to Recaptcha"));
        }

        //Wait a little (1 - 2 seconds) for the captcha to switch.
        Wait();

        //Return we are ready to proceed
        return base.BeforeSolveCaptcha();
    }

    /// <summary>
    /// This method gets called after BeforeSolveCaptcha and it does the actual captcha solving
    /// It will automatically try to see if there is a SolveMedia captcha active or a reCAPTCHA active. 
    /// If it finds either one it will then use the selected method on the Captcha tab of FaucetCollector to solve the Captcha.
    /// </summary>
    public override int DoSolveCaptcha()
    {
        if (GetBoolSetting("UseSolveMedia") && !OverriteSolvemedia)
        {
            //Make sure SolveMedia is active by clicking the link.
            Click(ElementByLinkText("Switch to SolveMedia captcha"));
            Wait(2);


            IWebElement Iframe = ElementByXPath("//iframe[contains(@src,'api-secure.solvemedia')]") ?? ElementByXPath("//iframe[contains(@src,'api.solvemedia.com')]");
            if (Iframe == null && ElementByXPath("//input[@id='adcopy_response']|//input[@name='adcopy_response']") == null)
            {
                Click(ElementByLinkText("Switch to Recaptcha"));
                Wait(2, 3);
                if (!IsVisible(ElementByXPath("//iframe[contains(@src,'google.com')]")))
                {
                    Log("Something is wrong with recaptcha");


                }
                Wait(2);
            }

        }
        else if (!GetBoolSetting("UseSolvemedia") || GetBoolSetting("SwitchC"))
        {

            //Make sure reCAPTCHA is active by clicking the link.
            Click(ElementByLinkText("Switch to Recaptcha"));
            Wait(2, 3);
            if (!IsVisible(ElementByXPath("//iframe[contains(@src,'google.com')]")))
            {
                Log("Something is wrong with recaptcha");


            }
            OverriteSolvemedia = false;

        }


        //Wait a little (1 - 2 seconds) for the captcha to switch.
        Wait();
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }

    /// <summary>
    /// This method will get called after DoSolveCaptcha returned it was a success.
    /// </summary>
    /// <returns></returns>
    public override int AfterSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }

    /// <summary>
    /// This method is called right before we attempt to claim on the faucet. 
    /// Next methods that will be called are DoSolveFaucet and AfterSolveFaucet and CheckFaucetResult.
    /// </summary>
    public override int BeforeSolveFaucet()
    {

        CheckForPopup();
        Wait(3);
        DoBlock( );
        //Try to dismiss the cookie banner
        ExecuteScript("if($('.cc_btn_accept_all').length > 0) { $('.cc_btn_accept_all')[0].click(); }");

        //Check what claim setting the user would like
        if (GetBoolSetting("ClaimAverage"))
        {
            //Put the claim averate on true
            ExecuteScript("if(faucetVM.claimAverage() == false) { faucetVM.claimAverage(true); }");
        }
        else
        {
            //Put the claim averate on false so the user get random claim amounts
            ExecuteScript("if(faucetVM.claimAverage() == true) { faucetVM.claimAverage(false); }");
        }

        //Let Faucet Collector continue its work
        return base.BeforeSolveFaucet();
    }

    /// <summary>
    /// This method gets called after the BeforeSolveFaucet. You can do the actual claiming of the faucet in here.
    /// </summary>
    /// <returns></returns>
    public override int DoSolveFaucet()
    {

        //Find the submit button to claim on the faucet
        var submitButton = ElementByXPath("//button[contains(@class,'btn btn-primary btn-lg')]");
        if (!IsVisible(submitButton))
        {
            //Unable to find the submit button - return the failure.
            return Fail("Submit button not found or not visible.");
        }

        //We need to solve the captcha on this page before clicking the Login button.
        //We use the SolveCaptcha method for this. SolveCaptcha will call BeforeSolveCaptcha, DoSolveCaptcha and AfterSolveCaptcha
        //The DoSolveCaptcha method does the actual solving - it checks if there is a SolveMedia Captcha or a reCAPTCHA present on the page 
        //and will solves that one using the selected method entered in Faucet Collector on the Captcha tab.
        //In this script we only override BeforeSolveCaptcha (see above) to enable SolveMedia or reCAPTCHA based on the user settings.
        var result = SolveCapt();
        if (result > 0)
        {
            //Unable to solve the captcha - return the failure
            return result;
        }

        //The Captcha is solved, click the submit button
        Click(submitButton);

        //Let Faucet Collector continue its work
        return base.DoSolveFaucet();
    }

    /// <summary>
    /// This method will get called after the DoSolveFaucet is completed and returned it was a success.
    /// This faucet shows a "Processing" window after you click the claim submit button.
    /// We will have to wait for it to disappear before we can check for the results.
    /// </summary>
    public override int AfterSolveFaucet()
    {
        //we create a counter so we don't wait forever
        int attempts = 0;
        //Find the element that is used for the "Processing" window.
        var processing = ElementById("ProgressModal");
        while (processing != null && processing.Displayed && attempts < 10)
        {
            //The "Processing" window is still there
            //Increase the attempts, so we can exit after 30 attempts
            attempts++;
            //Wait one second before the next attempt
            Wait(1);
            //Now get the "Processing" window again.
            processing = ElementById("ProgressModal");
        }

        //We are ready. The "Processing" window is gone or we did 30 attempts.
        //Either way we return this is a success.
        //Let Faucet Collector continue
        return base.AfterSolveFaucet();
    }

    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        return base.CheckFaucetResult();
    }
}