using FaucetCollector.Script;
using System;
using System.Collections.Generic;
using System.Linq;

//css_ref FaucetCollector.Utilities
public class FreeDogeonScript : FaucetScript
{
    public override int DoLogin ( )
    {
        var signInEmail =ElementsByXPath("//form[@id='login_form']//div[@class='small-12 columns']//input[@type='text']").FirstOrDefault(x=>IsVisible(x));
        if ( signInEmail==null )
        {
            return Fail ( "Signin email input not found." );

        }
        var signInPassword =ElementsByXPath("//form[@id='login_form']//div[@class='small-12 columns']//input[@type='password']").FirstOrDefault(x=>IsVisible(x));
        if ( signInPassword==null )
        {
            return Fail ( "Signin password input not found." );
        }
        SetText ( signInEmail , GetSetting ( "Email" ) );
        SetText ( signInPassword , GetPassword ( "Password" ) );
        var button = ElementById("login_button");
        if ( !IsVisible ( button ) )
        {
            return Fail ( "Login button not found" );

        }

        Click ( button );
        return base.DoLogin ( );
    }

    public override void Start ( )
    {
        Title="FreeDogeon.com|Free dogecoin";

        SuccessXPath="//*[@id='free_play_result']";
        FailXPath="//*[@id='free_play_error']";
        base.Start ( );
    }
    public const string BaseUrl="https://freedogeon.com/";
    public const string FaucetUrl=BaseUrl+"free-doge";
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings ( BaseUrl )
        {
            new FaucetSetting() {Name = "Email", Display = "Email", Type = EditorType.TextBox, Required = true},

            new FaucetSetting() { Name = "Password", Display = "Password", Type = EditorType.Password, Required = true },

            new FaucetSetting(){Name="Coin",Display="Coin to claim",Type=EditorType.ComboBox,Items=AvailableCoins,Default=AvailableCoins.FirstOrDefault()}
        };
        }
    }

    private readonly List<string> AvailableCoins =new List<string>()
    {
        "DOGE",
        "BTC",
        "ETH",
        "USDT",
        "USDC",
        "HT",
        "LEO",
        "BNB"
    }; 

   private string SelectedCoin { get {

            return GetSetting("Coin");
        
        }  
    }

    private string CoinXPath { get
        {
            return "//a[contains(text(),'"+SelectedCoin+"') and @class='older_newer_button_a tab-btn']";

        } }
    public override int DoSolveFaucet ( )
    {

        if ( !Driver.Url.Contains ( FaucetUrl ) )
        {
            GoToUrl ( FaucetUrl );
            Wait ( 2 );
        }

        // Select Coin
        var CoinSelect=ElementByXPath(CoinXPath);
        if ( IsVisible(CoinSelect) )
        {
            Click(CoinSelect);
            Wait(1);
        }

        var submitButton=ElementByXPath("//button[@class='button free_play_element']|//button[contains(text(),'ROLL')]");

        OpenQA.Selenium.IWebElement captcha = ElementByXPath("//div[@id='free_play_tab']//iframe[contains(@src, 'recaptcha/api2')]");
        if ( !IsVisible ( submitButton ) )
        {
            //Unable to find the submit button - return the failure.
            return Fail ( "Submit button not found or not visible." );
        }
        if ( IsVisible ( captcha ) )
        {


            int result = DoSolveCaptcha();
            if ( result>0 )
            {
                //Unable to solve the captcha - return the failure
                return result;
            }
        }
        Click ( submitButton );

        return base.DoSolveFaucet ( );
    }
    public override int DoSolveCaptcha ( )
    {
        // Solve the captcha
        var result= base.DoSolveCaptcha ( );
        if ( result>0 )
        {
            return result;
        }
        // If the captcha is solved correctly call the callback of the recaptcha
        FaucetCollector.Captcha.RecaptchaUtility recaptchaUtility=new FaucetCollector.Captcha.RecaptchaUtility(this);
        recaptchaUtility.DoSolve ( );

        return result;
    }
    public override int GetFaucetWaitTime ( )
    {
        if ( !Driver.Url.Contains ( FaucetUrl ) )
        {
            GoToUrl ( FaucetUrl );
            Wait ( 2 );
        }
        OpenQA.Selenium.IWebElement timerCheck = ElementById("time_remaining");
        if ( !IsVisible ( timerCheck ) )
        {
            //no time remaining element, so we are good to go.
            return 0;
        }

        string minutes_ = Convert.ToString(ExecuteScript("return $('#time_remaining .countdown_amount')[0].innerText"));
        string secounds_ = Convert.ToString(ExecuteScript("return $('#time_remaining .countdown_amount')[1].innerText"));
        if ( string.IsNullOrEmpty ( secounds_ )||string.IsNullOrEmpty ( minutes_ ) )
        {
            return 0;
        }

        int minutes,seconds;
        if ( !int.TryParse ( minutes_.Trim ( ) , out minutes ) )
        {
            //unable to parse.
            return GetWaitSetting ( );
        }
        if ( !int.TryParse ( secounds_.Trim ( ) , out seconds ) )
        {
            //unable to parse.
            return GetWaitSetting ( );
        }

      

        //we need to return the total number of seconds
        return ( minutes*60 )+seconds;
    }
    public override bool IsLoggedIn ( )
    {
        //If there is a visible element time_remaining or free_play_form_button then we are logged in.     
        return ElementByXPath ("//img[contains(@src,'logout')] | //li[contains(@class,'balanceli withdraw_link new_dropdown')] ")!=null;  
    }
}
